using Domain.DTOs;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using TelegramBot.Domain.DTOs;
using TelegramBot.Domain.Entities;
using TelegramBot.Services.OptionServices;
using TelegramBot.Services.QuestionService;
using TelegramBot.Services.SubjectService;
using TelegramBot.Services.UserResponceService;
using User = TelegramBot.Domain.Entities.User;

namespace TelegramBot.Services;

public class TelegramBotHostedService : IHostedService
{
    private readonly IServiceScopeFactory _scopeFactory;
    private readonly IConfiguration _configuration;
    private readonly TelegramBotClient _client;
    private readonly string _channelId;
    private readonly string _channelLink;
    private readonly Dictionary<long, RegistrationInfo> _pendingRegistrations = new();
    private readonly Dictionary<long, int> _userScores = new();
    private readonly Dictionary<long, int> _userQuestions = new();
    private readonly Dictionary<long, bool> _pendingBroadcast = new();
    private readonly Dictionary<long, int> _userCurrentSubject = new();
    private readonly Dictionary<long, (int QuestionId, DateTime StartTime, bool IsAnswered, IReplyMarkup Markup, int MessageId)> _activeQuestions = new();
    private readonly Dictionary<long, CancellationTokenSource> _questionTimers = new();    private const int MaxQuestions = 10;
    private const int QuestionTimeLimit = 30;
    private readonly HashSet<int> NoTimerSubjects = new() { 1, 8, 10 }; // 1 - –•–∏–º–∏—è, 8 - –§–∏–∑–∏–∫–∞, 10 - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞—Ä–æ–∏ –∏–±—Ç–∏–¥–æ–∏ –±–æ—Ç
    public TelegramBotHostedService(IServiceScopeFactory scopeFactory, IConfiguration configuration)
    {
        _scopeFactory = scopeFactory;
        _configuration = configuration;
        var token = configuration["BotConfiguration:Token"] ?? throw new ArgumentNullException("–¢–æ–∫–µ–Ω–∏ –ë–æ—Ç–∏ Telegram —ë—Ñ—Ç –Ω–∞—à—É–¥!");
        _client = new TelegramBotClient(token);
        _channelId = configuration["TelegramChannel:ChannelId"] ?? throw new ArgumentNullException("ID-–∏ –∫–∞–Ω–∞–ª —ë—Ñ—Ç –Ω–∞—à—É–¥!");
        _channelLink = configuration["TelegramChannel:ChannelLink"] ?? throw new ArgumentNullException("–ü–∞–π–≤–∞–Ω–¥–∏ –∫–∞–Ω–∞–ª —ë—Ñ—Ç –Ω–∞—à—É–¥!");
    }

    // –û“ì–æ–∑–∏ —Ñ–∞—ä–æ–ª–∏—è—Ç–∏ –±–æ—Ç
    public async Task StartAsync(CancellationToken cancellationToken)
    {
        try
        {
            var me = await _client.GetMeAsync(cancellationToken);
            Console.WriteLine($"–ë–æ—Ç –±–æ –Ω–æ–º–∏ {me.Username} –ø–∞–π–≤–∞—Å—Ç —à—É–¥");

            var offset = 0;
            while (!cancellationToken.IsCancellationRequested)
            {
                try
                {
                    var updates = await _client.GetUpdatesAsync(offset, cancellationToken: cancellationToken);
                    foreach (var update in updates)
                    {
                        await HandleUpdateAsync(update, cancellationToken);
                        offset = update.Id + 1;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"–•–∞—Ç–æ–≥”£ –¥–∞—Ä –¥–∞—Ä—Ö–æ—Å—Ç: {ex.Message}");
                    await Task.Delay(1000, cancellationToken);
                }
                await Task.Delay(500, cancellationToken);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –æ“ì–æ–∑–∏ –±–æ—Ç: {ex.Message}");
        }
    }

    // “ö–∞—Ç—ä –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∞—ä–æ–ª–∏—è—Ç–∏ –±–æ—Ç
    public Task StopAsync(CancellationToken cancellationToken)
    {
        Console.WriteLine("–ë–æ—Ç “õ–∞—Ç—ä –∫–∞—Ä–¥–∞ –º–µ—à–∞–≤–∞–¥...");
        return Task.CompletedTask;
    }

    // –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –Ω–∞–≤—Å–æ–∑–∏“≥–æ (update) –∞–∑ Telegram
    private async Task HandleUpdateAsync(Update update, CancellationToken cancellationToken)
    {
        if (update.Type == UpdateType.Message && update.Message != null)
        {
            var message = update.Message;
            var chatId = message.Chat.Id;
            var text = message.Text;

            using var scope = _scopeFactory.CreateScope();
            var questionService = scope.ServiceProvider.GetRequiredService<IQuestionService>();
            var optionService = scope.ServiceProvider.GetRequiredService<IOptionService>();
            var responseService = scope.ServiceProvider.GetRequiredService<IResponseService>();
            var subjectService = scope.ServiceProvider.GetRequiredService<ISubjectService>();

            if (_pendingBroadcast.ContainsKey(chatId) && _pendingBroadcast[chatId])
            {
                if (text == "‚ùå –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω")
                {
                    CleanupBroadcastState(chatId);
                    await _client.SendMessage(chatId, "–§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥!", replyMarkup: GetAdminButtons(), cancellationToken: cancellationToken);
                    return;
                }
                await HandleBroadcastMessageAsync(chatId, text, scope.ServiceProvider, cancellationToken);
                return;
            }

            if (message.Document != null)
            {
                if (await IsUserAdminAsync(chatId, cancellationToken))
                {
                    if (!_userCurrentSubject.ContainsKey(chatId))
                    {
                        await _client.SendMessage(chatId, "‚ùå –õ—É—Ç—Ñ–∞–Ω, –∞–≤–≤–∞–ª —Ñ–∞–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥!", replyMarkup: await GetMainButtonsAsync(chatId, cancellationToken), cancellationToken: cancellationToken);
                        return;
                    }
                    await HandleFileUploadAsync(message, questionService, subjectService, cancellationToken);
                }
                else
                {
                    await _client.SendMessage(chatId, "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω“≥–æ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥ —Ñ–∞–π–ª –±–æ—Ä –∫—É–Ω–∞–Ω–¥!", cancellationToken: cancellationToken);
                }
                return;
            }

            if (text != "/start" && text != "/register")
            {
                if (!await CheckChannelSubscriptionAsync(chatId, cancellationToken))
                {
                    return;
                }
            }

            if (message.Contact != null)
            {
                await HandleContactRegistrationAsync(message, scope.ServiceProvider, cancellationToken);
                return;
            }

            if (_pendingRegistrations.ContainsKey(chatId))
            {
                var reg = _pendingRegistrations[chatId];
                if (!reg.IsNameReceived)
                {
                    await HandleNameRegistrationAsync(chatId, text, cancellationToken);
                    return;
                }
                else if (reg.IsNameReceived && !reg.IsCityReceived)
                {
                    await HandleCityRegistrationAsync(chatId, text, scope.ServiceProvider, cancellationToken);
                    return;
                }
            }

            switch (text)
            {
                case "/start":
                    if (!await IsUserRegisteredAsync(chatId, scope.ServiceProvider, cancellationToken))
                    {
                        await SendRegistrationRequestAsync(chatId, cancellationToken);
                    }
                    else
                    {
                        await _client.SendMessage(chatId, "–•—É—à –æ–º–∞–µ–¥! –ë–∞—Ä–æ–∏ –æ“ì–æ–∑–∏ —Ç–µ—Å—Ç —Ç—É–≥–º–∞–∏ '–û“ì–æ–∑–∏ —Ç–µ—Å—Ç'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.", replyMarkup: await GetMainButtonsAsync(chatId, cancellationToken), cancellationToken: cancellationToken);
                    }
                    break;

                case "/register":
                    if (!await IsUserRegisteredAsync(chatId, scope.ServiceProvider, cancellationToken))
                    {
                        await SendRegistrationRequestAsync(chatId, cancellationToken);
                    }
                    else
                    {
                        await _client.SendMessage(chatId, "–®—É–º–æ –∞–ª–ª–∞–∫–∞–π —Å–∞–±—Ç–∏ –Ω–æ–º —à—É–¥–∞–µ–¥!", cancellationToken: cancellationToken);
                    }
                    break;

                case "üéØ –û“ì–æ–∑–∏ —Ç–µ—Å—Ç":
                    if (!await IsUserRegisteredAsync(chatId, scope.ServiceProvider, cancellationToken))
                    {
                        await _client.SendMessage(chatId, "–õ—É—Ç—Ñ–∞–Ω, –∞–≤–≤–∞–ª –¥–∞—Ä –±–æ—Ç —Å–∞–±—Ç–∏ –Ω–æ–º –∫—É–Ω–µ–¥. –ë–∞—Ä–æ–∏ —Å–∞–±—Ç–∏ –Ω–æ–º /register -—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.", cancellationToken: cancellationToken);
                    }
                    else
                    {
                        _userScores[chatId] = 0;
                        _userQuestions[chatId] = 0;
                        await HandleNewQuestionAsync(chatId, questionService, subjectService, cancellationToken);
                    }
                    break;

                case "üèÜ –ë–µ“≥—Ç–∞—Ä–∏–Ω“≥–æ":
                    await HandleTopCommandAsync(chatId, scope.ServiceProvider, cancellationToken);
                    break;

                case "üë§ –ü—Ä–æ—Ñ–∏–ª":
                    await HandleProfileCommandAsync(chatId, scope.ServiceProvider, cancellationToken);
                    break;

                case "‚ÑπÔ∏è –ö”Ø–º–∞–∫":
                    await HandleHelpCommandAsync(chatId, cancellationToken);
                    break;

                case "üìö –ò–Ω—Ç–∏—Ö–æ–±–∏ —Ñ–∞–Ω":                    var subjectKeyboard = new ReplyKeyboardMarkup
                    {
                        Keyboard = new List<List<KeyboardButton>>
                        {
                            new() { new KeyboardButton("üß™ –•–∏–º–∏—è"), new KeyboardButton("üî¨ –ë–∏–æ–ª–æ–≥–∏—è") },
                            new() { new KeyboardButton("üìñ –ó–∞–±–æ–Ω–∏ —Ç–æ“∑–∏–∫”£"), new KeyboardButton("üåç –ó–∞–±–æ–Ω–∏ –∞–Ω–≥–ª–∏—Å”£") },
                            new() { new KeyboardButton("üìú –¢–∞—ä—Ä–∏—Ö"), new KeyboardButton("üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è") },
                            new() { new KeyboardButton("üìö –ê–¥–∞–±–∏—ë—Ç–∏ —Ç–æ“∑–∏–∫"), new KeyboardButton("‚öõÔ∏è –§–∏–∑–∏–∫–∞") },
                            new() { new KeyboardButton("üá∑üá∫ –ó–∞–±–æ–Ω–∏ —Ä—É—Å”£"), new KeyboardButton("üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞") },
                            new() { new KeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç") }
                        },
                        ResizeKeyboard = true
                    };
                    await _client.SendMessage(chatId, "–õ—É—Ç—Ñ–∞–Ω, —Ñ–∞–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", replyMarkup: subjectKeyboard, cancellationToken: cancellationToken);
                    break;

                case "üß™ –•–∏–º–∏—è":
                case "üî¨ –ë–∏–æ–ª–æ–≥–∏—è":
                case "üìñ –ó–∞–±–æ–Ω–∏ —Ç–æ“∑–∏–∫”£":
                case "üåç –ó–∞–±–æ–Ω–∏ –∞–Ω–≥–ª–∏—Å”£":
                case "üìú –¢–∞—ä—Ä–∏—Ö":
                case "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è":
                case "üìö –ê–¥–∞–±–∏—ë—Ç–∏ —Ç–æ“∑–∏–∫":
                case "‚öõÔ∏è –§–∏–∑–∏–∫–∞":
                case "üá∑üá∫ –ó–∞–±–æ–Ω–∏ —Ä—É—Å”£":
                case "üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞":
                    await HandleSubjectSelectionAsync(chatId, text, cancellationToken);
                    break;

                case "‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç":
                    await _client.SendMessage(chatId, "–ë–æ–∑–≥–∞—à—Ç –±–∞ –º–µ–Ω—é–∏ –∞—Å–æ—Å”£", replyMarkup: await GetMainButtonsAsync(chatId, cancellationToken), cancellationToken: cancellationToken);
                    break;

                case "üë®‚Äçüíº –ê–¥–º–∏–Ω":
                    await HandleAdminCommandAsync(chatId, cancellationToken);
                    break;

                case "üì¢ –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º":
                    if (await IsUserAdminAsync(chatId, cancellationToken))
                    {
                        _pendingBroadcast[chatId] = true;
                        var cancelKeyboard = new ReplyKeyboardMarkup(new[] { new KeyboardButton("‚ùå –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω") }) { ResizeKeyboard = true };
                        await _client.SendMessage(chatId, "üì¢ –õ—É—Ç—Ñ–∞–Ω, –ø–∞—ë–º–µ—Ä–æ, –∫–∏ –±–∞ “≥–∞–º–∞–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ –º–µ—à–∞–≤–∞–¥, –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:", replyMarkup: cancelKeyboard, cancellationToken: cancellationToken);
                    }
                    else
                    {
                        await _client.SendMessage(chatId, "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω“≥–æ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥ –ø–∞—ë–º —Ñ–∏—Ä–∏—Å—Ç–∞–Ω–¥!", cancellationToken: cancellationToken);
                    }
                    break;
                case "üìä –û–º–æ—Ä":
                if (await IsUserAdminAsync(chatId, cancellationToken))
                {
                    await HandleStatisticsCommandAsync(chatId, scope.ServiceProvider, cancellationToken);
                }
                else
                {
                    await _client.SendMessage(chatId, "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω“≥–æ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥ –æ–º–æ—Ä—Ä–æ –±—É–±–∏–Ω–∞–Ω–¥!", cancellationToken: cancellationToken);
                }
                break;

                default:
                    await _client.SendMessage(chatId, "–§–∞—Ä–º–æ–Ω–∏ –Ω–æ–¥—É—Ä—É—Å—Ç!", cancellationToken: cancellationToken);
                    break;
            }
        }
        else if (update.Type == UpdateType.CallbackQuery && update.CallbackQuery != null)
        {
            using var scope = _scopeFactory.CreateScope();
            var questionService = scope.ServiceProvider.GetRequiredService<IQuestionService>();
            var responseService = scope.ServiceProvider.GetRequiredService<IResponseService>();
            var subjectService = scope.ServiceProvider.GetRequiredService<ISubjectService>();
            await HandleCallbackQueryAsync(update.CallbackQuery, questionService, responseService, subjectService, cancellationToken);
        }
    }

    // –°–∞–Ω“∑–∏—à–∏ —Å–∞–±—Ç–∏ –Ω–æ–º–∏ –∫–æ—Ä–±–∞—Ä
    private async Task<bool> IsUserRegisteredAsync(long chatId, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
        return await dbContext.Users.AnyAsync(u => u.ChatId == chatId, cancellationToken);
    }

    // –î–∞—Ä—Ö–æ—Å—Ç –±–∞—Ä–æ–∏ —Å–∞–±—Ç–∏ –Ω–æ–º
    private async Task SendRegistrationRequestAsync(long chatId, CancellationToken cancellationToken)
    {
        var requestContactButton = new KeyboardButton("–†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω") { RequestContact = true };
        var keyboard = new ReplyKeyboardMarkup(new[] { new[] { requestContactButton } }) { ResizeKeyboard = true, OneTimeKeyboard = true };
        await _client.SendMessage(chatId, "–ë–∞—Ä–æ–∏ —Å–∞–±—Ç–∏ –Ω–æ–º —Ç—É–≥–º–∞–∏ –∑–µ—Ä–∏–Ω—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥!", replyMarkup: keyboard, cancellationToken: cancellationToken);
    }

    // –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Å–∞–±—Ç–∏ –Ω–æ–º –±–æ —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    private async Task HandleContactRegistrationAsync(Message message, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        var chatId = message.Chat.Id;
        var contact = message.Contact;
        var autoUsername = !string.IsNullOrWhiteSpace(message.Chat.Username) ? message.Chat.Username : message.Chat.FirstName;

        if (!_pendingRegistrations.ContainsKey(chatId))
        {
            _pendingRegistrations[chatId] = new RegistrationInfo { Contact = contact, AutoUsername = autoUsername, IsNameReceived = false, IsCityReceived = false };
            await _client.SendMessage(chatId, "–¢–∞—à–∞–∫–∫—É—Ä! –ê–∫–Ω—É–Ω –Ω–æ–º–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.", replyMarkup: new ReplyKeyboardRemove(), cancellationToken: cancellationToken);
        }
        else
        {
            await _client.SendMessage(chatId, "–õ—É—Ç—Ñ–∞–Ω, –Ω–æ–º–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥, —Ç–æ —Å–∞–±—Ç–∏ –Ω–æ–º—Ä–æ –∞–Ω“∑–æ–º –¥–∏“≥–µ–¥.", cancellationToken: cancellationToken);
        }
    }

    // –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –≤–æ—Ä–∏–¥ –∫–∞—Ä–¥–∞–Ω–∏ –Ω–æ–º
    private async Task HandleNameRegistrationAsync(long chatId, string name, CancellationToken cancellationToken)
    {
        if (!_pendingRegistrations.ContainsKey(chatId)) return;
        var regInfo = _pendingRegistrations[chatId];
        regInfo.Name = name;
        regInfo.IsNameReceived = true;
        await _client.SendMessage(chatId, "–õ—É—Ç—Ñ–∞–Ω, —à–∞“≥—Ä–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.", replyMarkup: new ReplyKeyboardRemove(), cancellationToken: cancellationToken);
    }

    // –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –≤–æ—Ä–∏–¥ –∫–∞—Ä–¥–∞–Ω–∏ —à–∞“≥—Ä –≤–∞ –∞–Ω“∑–æ–º–∏ —Å–∞–±—Ç–∏ –Ω–æ–º
    private async Task HandleCityRegistrationAsync(long chatId, string city, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        if (!_pendingRegistrations.ContainsKey(chatId)) return;
        var regInfo = _pendingRegistrations[chatId];
        regInfo.City = city;
        regInfo.IsCityReceived = true;

        try
        {
            using var scope = _scopeFactory.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
            var user = new User { ChatId = chatId, Username = regInfo.AutoUsername, Name = regInfo.Name, PhoneNumber = regInfo.Contact.PhoneNumber, City = regInfo.City, Score = 0 };
            dbContext.Users.Add(user);
            await dbContext.SaveChangesAsync(cancellationToken);
            await _client.SendMessage(chatId, "–°–∞–±—Ç–∏ –Ω–æ–º–∏ —à—É–º–æ –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∞–Ω“∑–æ–º —ë—Ñ—Ç!\n–ë–∞—Ä–æ–∏ –æ“ì–æ–∑–∏ —Ç–µ—Å—Ç —Ç—É–≥–º–∞–∏ '–û“ì–æ–∑–∏ —Ç–µ—Å—Ç'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥!", replyMarkup: await GetMainButtonsAsync(chatId, cancellationToken), cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Å–∞–±—Ç–∏ –∫–æ—Ä–±–∞—Ä: {ex.Message}");
            await _client.SendMessage(chatId, "–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Å–∞–±—Ç–∏ –º–∞—ä–ª—É–º–æ—Ç —Ä—É—Ö –¥–æ–¥. –õ—É—Ç—Ñ–∞–Ω, –±–∞—ä–¥—Ç–∞—Ä –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.", cancellationToken: cancellationToken);
        }
        finally
        {
            _pendingRegistrations.Remove(chatId);
        }
    }

    // –¢—É–≥–º–∞“≥–æ–∏ –∞—Å–æ—Å–∏–∏ –º–µ–Ω—é
    private async Task<IReplyMarkup> GetMainButtonsAsync(long chatId, CancellationToken cancellationToken)
    {
        var isAdmin = await IsUserAdminAsync(chatId, cancellationToken);
        var buttons = new List<List<KeyboardButton>>
        {
            new() { new KeyboardButton("üìö –ò–Ω—Ç–∏—Ö–æ–±–∏ —Ñ–∞–Ω"), new KeyboardButton("üéØ –û“ì–æ–∑–∏ —Ç–µ—Å—Ç") },
            new() { new KeyboardButton("üèÜ –ë–µ“≥—Ç–∞—Ä–∏–Ω“≥–æ"), new KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª") },
            new() { new KeyboardButton("‚ÑπÔ∏è –ö”Ø–º–∞–∫") }
        };
        if (isAdmin) buttons.Add(new() { new KeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω") });
        return new ReplyKeyboardMarkup(buttons) { ResizeKeyboard = true };
    }

    // –¢—É–≥–º–∞“≥–æ–∏ –∏–Ω—Ç–∏—Ö–æ–±–∏ “∑–∞–≤–æ–±“≥–æ –±–∞—Ä–æ–∏ —Å–∞–≤–æ–ª“≥–æ
    private IReplyMarkup GetButtons(int questionId)
    {
        return new InlineKeyboardMarkup(new[]
        {
            new[] { InlineKeyboardButton.WithCallbackData("‚ñ´Ô∏è A", $"{questionId}_A"), InlineKeyboardButton.WithCallbackData("‚ñ´Ô∏è B", $"{questionId}_B") },
            new[] { InlineKeyboardButton.WithCallbackData("‚ñ´Ô∏è C", $"{questionId}_C"), InlineKeyboardButton.WithCallbackData("‚ñ´Ô∏è D", $"{questionId}_D") }
        });
    }

    // –ò–Ω—Ç–∏—Ö–æ–±–∏ —Ñ–∞–Ω
    private async Task HandleSubjectSelectionAsync(long chatId, string text, CancellationToken cancellationToken)
    {        int subjectId = text switch
        {
            "üß™ –•–∏–º–∏—è" => 1,
            "üî¨ –ë–∏–æ–ª–æ–≥–∏—è" => 2,
            "üìñ –ó–∞–±–æ–Ω–∏ —Ç–æ“∑–∏–∫”£" => 3,
            "üåç –ó–∞–±–æ–Ω–∏ –∞–Ω–≥–ª–∏—Å”£" => 4,
            "üìú –¢–∞—ä—Ä–∏—Ö" => 5,
            "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è" => 6,
            "üìö –ê–¥–∞–±–∏—ë—Ç–∏ —Ç–æ“∑–∏–∫" => 7,
            "‚öõÔ∏è –§–∏–∑–∏–∫–∞" => 8,
            "üá∑üá∫ –ó–∞–±–æ–Ω–∏ —Ä—É—Å”£" => 9,
            "üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" => 10,
            _ => 0
        };
        if (subjectId == 0) return;
        _userCurrentSubject[chatId] = subjectId;
        var isAdmin = await IsUserAdminAsync(chatId, cancellationToken);
        var buttons = new List<List<KeyboardButton>>();
        string message;
        if (isAdmin)
        {
            buttons.Add(new() { new KeyboardButton("üì§ –ë–æ—Ä–∫—É–Ω–∏–∏ —Ñ–∞–π–ª") });
            message = $"–®—É–º–æ —Ñ–∞–Ω–∏ {text}-—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫–∞—Ä–¥–µ–¥.\n–ë–∞—Ä–æ–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Å–∞–≤–æ–ª“≥–æ —Ñ–∞–π–ª–∏ .docx —Ñ–∏—Ä–∏—Å—Ç–µ–¥.";
        }
        else
        {
            buttons.Add(new() { new KeyboardButton("üéØ –û“ì–æ–∑–∏ —Ç–µ—Å—Ç") });
            message = $"–®—É–º–æ —Ñ–∞–Ω–∏ {text}-—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫–∞—Ä–¥–µ–¥.\n–ë–∞—Ä–æ–∏ –æ“ì–æ–∑–∏ —Ç–µ—Å—Ç —Ç—É–≥–º–∞–∏ '–û“ì–æ–∑–∏ —Ç–µ—Å—Ç'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.";
        }
        buttons.Add(new() { new KeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç") });
        var keyboard = new ReplyKeyboardMarkup(buttons) { ResizeKeyboard = true };
        await _client.SendMessage(chatId, message, replyMarkup: keyboard, cancellationToken: cancellationToken);
    }

    // –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Å–∞–≤–æ–ª–∏ –Ω–∞–≤
    private async Task HandleNewQuestionAsync(long chatId, IQuestionService questionService, ISubjectService subjectService, CancellationToken cancellationToken)
    {
        if (!_userCurrentSubject.TryGetValue(chatId, out int currentSubject))
        {
            await _client.SendMessage(chatId, "‚ùå –õ—É—Ç—Ñ–∞–Ω, –∞–≤–≤–∞–ª —Ñ–∞–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥!", replyMarkup: await GetMainButtonsAsync(chatId, cancellationToken), cancellationToken: cancellationToken);
            return;
        }

        if (_userQuestions[chatId] >= MaxQuestions)
        {
            string resultText = $"<b>üìù –¢–µ—Å—Ç –±–∞ –æ—Ö–∏—Ä —Ä–∞—Å–∏–¥!</b>\n–•–æ–ª“≥–æ–∏ —à—É–º–æ: {_userScores[chatId]}/{MaxQuestions}.";
            var restartButton = new InlineKeyboardMarkup(InlineKeyboardButton.WithCallbackData("‚ôªÔ∏è –ê–∑ –Ω–∞–≤ –æ“ì–æ–∑ –∫—É–Ω–µ–¥!", "restart"));
            await _client.SendMessage(chatId, resultText, parseMode: ParseMode.Html, replyMarkup: restartButton, cancellationToken: cancellationToken);
            return;
        }

        var question = await questionService.GetRandomQuestionBySubject(currentSubject);
        if (question != null)
        {
            _userQuestions[chatId]++;
            if (_questionTimers.TryGetValue(chatId, out var oldTimer))
            {
                oldTimer.Cancel();
                _questionTimers.Remove(chatId);
            }            var markup = GetButtons(question.QuestionId);
            var messageText = $"<b>üìö –§–∞–Ω: {question.SubjectName}</b>\n\n" +
                $"‚ùì {question.QuestionText}\n\n" +
                $"A) {question.FirstOption}\n" +
                $"B) {question.SecondOption}\n" +
                $"C) {question.ThirdOption}\n" +
                $"D) {question.FourthOption}";

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ NoTimerSubjects
            if (!NoTimerSubjects.Contains(currentSubject))
            {
                messageText += $"\n\n<i>‚è± –í–∞“õ—Ç: {QuestionTimeLimit} —Å–æ–Ω–∏—è</i>";
            }

            var sentMessage = await _client.SendMessage(chatId,
                messageText,
                parseMode: ParseMode.Html, 
                replyMarkup: markup, 
                cancellationToken: cancellationToken);            _activeQuestions[chatId] = (question.QuestionId, DateTime.UtcNow, false, markup, sentMessage.MessageId);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ NoTimerSubjects
            if (!NoTimerSubjects.Contains(currentSubject))
            {
                var cts = new CancellationTokenSource();
                _questionTimers[chatId] = cts;
                _ = UpdateQuestionTimer(chatId, cts.Token);
            }
        }
        else
        {
            await _client.SendMessage(chatId, "‚ùå –î–∞—Ä –∞–π–Ω–∏ –∑–∞–º–æ–Ω —Å–∞–≤–æ–ª“≥–æ –±–∞—Ä–æ–∏ –∏–Ω —Ñ–∞–Ω –¥–∞—Å—Ç—Ä–∞—Å –Ω–µ—Å—Ç–∞–Ω–¥.", cancellationToken: cancellationToken);
        }
    }

    // –ù–∞–≤—Å–æ–∑–∏–∏ —Ç–∞–π–º–µ—Ä–∏ —Å–∞–≤–æ–ª
    private async Task UpdateQuestionTimer(long chatId, CancellationToken cancellationToken)
    {
        try
        {
            if (_activeQuestions.TryGetValue(chatId, out var questionInfo) && !questionInfo.IsAnswered)
            {
                using var scope = _scopeFactory.CreateScope();
                var questionService = scope.ServiceProvider.GetRequiredService<IQuestionService>();
                var question = await questionService.GetQuestionById(questionInfo.QuestionId);
                if (question == null) return;

                int remainingTime = QuestionTimeLimit;
                while (remainingTime > 0 && !questionInfo.IsAnswered)
                {
                    await Task.Delay(1000, cancellationToken);
                    remainingTime--;

                    if (_activeQuestions.TryGetValue(chatId, out var updatedInfo) && !updatedInfo.IsAnswered)
                    {
                        await _client.EditMessageText(chatId, updatedInfo.MessageId,
                            $"<b>üìö –§–∞–Ω: {question.SubjectName}</b>\n\n" +
                            $"‚ùì {question.QuestionText}\n\n" +
                            $"A) {question.FirstOption}\n" +
                            $"B) {question.SecondOption}\n" +
                            $"C) {question.ThirdOption}\n" +
                            $"D) {question.FourthOption}\n\n" +
                            $"<i>‚è± –í–∞“õ—Ç: {remainingTime} —Å–æ–Ω–∏—è</i>",
                            parseMode: ParseMode.Html,
                            replyMarkup: (InlineKeyboardMarkup)updatedInfo.Markup,
                            cancellationToken: cancellationToken);
                    }
                }

                if (_activeQuestions.TryGetValue(chatId, out var finalInfo) && !finalInfo.IsAnswered)
                {
                    var responseService = scope.ServiceProvider.GetRequiredService<IResponseService>();
                    var updatedMarkup = UpdateButtonsMarkup(finalInfo.QuestionId, null, false, question.Answer, question);
                    await _client.EditMessageReplyMarkupAsync(chatId, finalInfo.MessageId, replyMarkup: updatedMarkup, cancellationToken: cancellationToken);

                    var userResponse = new UserResponse 
                    { 
                        ChatId = chatId, 
                        QuestionId = finalInfo.QuestionId, 
                        SelectedOption = "“∂–∞–≤–æ–± –¥–æ–¥–∞ –Ω–∞—à—É–¥", 
                        IsCorrect = false 
                    };
                    await responseService.SaveUserResponse(userResponse);
                    _activeQuestions[chatId] = (finalInfo.QuestionId, finalInfo.StartTime, true, finalInfo.Markup, finalInfo.MessageId);

                    if (_userQuestions[chatId] < MaxQuestions)
                    {
                        var subjectService = scope.ServiceProvider.GetRequiredService<ISubjectService>();
                        await HandleNewQuestionAsync(chatId, questionService, subjectService, cancellationToken);
                    }
                    else
                    {
                        string resultText = $"<b>üìù –¢–µ—Å—Ç –±–∞ –æ—Ö–∏—Ä —Ä–∞—Å–∏–¥!</b>\n–•–æ–ª“≥–æ–∏ —à—É–º–æ: {_userScores[chatId]}/{MaxQuestions}.";
                        var restartButton = new InlineKeyboardMarkup(InlineKeyboardButton.WithCallbackData("‚ôªÔ∏è –ê–∑ –Ω–∞–≤ –æ“ì–æ–∑ –∫—É–Ω–µ–¥!", "restart"));
                        await _client.SendMessage(chatId, resultText, parseMode: ParseMode.Html, replyMarkup: restartButton, cancellationToken: cancellationToken);
                    }
                }
            }
        }
        catch (TaskCanceledException) { }
        catch (Exception ex)
        {
            Console.WriteLine($"–•–∞—Ç–æ–≥”£ –¥–∞—Ä —Ç–∞–π–º–µ—Ä: {ex.Message}");
        }
    }

    // –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ “∑–∞–≤–æ–±“≥–æ –±–∞ —Å–∞–≤–æ–ª“≥–æ
    private async Task HandleCallbackQueryAsync(CallbackQuery callbackQuery, IQuestionService questionService, IResponseService responseService, ISubjectService subjectService, CancellationToken cancellationToken)
    {
        var chatId = callbackQuery.Message.Chat.Id;
        if (callbackQuery.Data == "restart")
        {
            _userScores[chatId] = 0;
            _userQuestions[chatId] = 0;
            if (_questionTimers.TryGetValue(chatId, out var questionTimer))
            {
                questionTimer.Cancel();
                _questionTimers.Remove(chatId);
            }
            _activeQuestions.Remove(chatId);
            await _client.SendMessage(chatId, "–¢–µ—Å—Ç –∞–∑ –Ω–∞–≤ –æ“ì–æ–∑ —à—É–¥!\n–ë–∞—Ä–æ–∏ –∏–¥–æ–º–∞ –¥–æ–¥–∞–Ω —Ç—É–≥–º–∞–∏ '–û“ì–æ–∑–∏ —Ç–µ—Å—Ç'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.", replyMarkup: await GetMainButtonsAsync(chatId, cancellationToken), cancellationToken: cancellationToken);
            return;
        }

        var callbackData = callbackQuery.Data.Split('_');
        if (!int.TryParse(callbackData[0], out int questionId)) return;
        if (!_activeQuestions.TryGetValue(chatId, out var questionInfo) || questionInfo.IsAnswered)
        {
            await _client.AnswerCallbackQuery(callbackQuery.Id, "‚ö†Ô∏è –í–∞“õ—Ç–∏ “∑–∞–≤–æ–± –¥–æ–¥–∞–Ω –≥—É–∑–∞—à—Ç!", showAlert: true, cancellationToken: cancellationToken);
            return;
        }

        var question = await questionService.GetQuestionById(questionId);
        if (question == null)
        {
            await _client.SendMessage(chatId, "–°–∞–≤–æ–ª —ë—Ñ—Ç –Ω–∞—à—É–¥.", cancellationToken: cancellationToken);
            return;
        }

        var selectedOption = callbackData[1].Trim().ToUpper();
        string selectedOptionText = selectedOption switch
        {
            "A" => question.FirstOption.Trim(),
            "B" => question.SecondOption.Trim(),
            "C" => question.ThirdOption.Trim(),
            "D" => question.FourthOption.Trim(),
            _ => ""
        };
        string correctAnswer = question.Answer.Trim();
        bool isCorrect = selectedOptionText == correctAnswer;

        // –ù–∞–≤—Å–æ–∑”£ –∫–∞—Ä–¥–∞–Ω–∏ “≥–æ–ª–∞—Ç–∏ —Å–∞–≤–æ–ª –±–∞ "“∑–∞–≤–æ–± –¥–æ–¥–∞ —à—É–¥"
        _activeQuestions[chatId] = (questionId, questionInfo.StartTime, true, questionInfo.Markup, questionInfo.MessageId);

        // “ö–∞—Ç—ä –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞–π–º–µ—Ä
        if (_questionTimers.TryGetValue(chatId, out var currentTimer))
        {
            currentTimer.Cancel();
            _questionTimers.Remove(chatId);
        }

        // –¢–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω–∏ —Ç—É–≥–º–∞“≥–æ –±–∞—Ä–æ–∏ –Ω–∏—à–æ–Ω –¥–æ–¥–∞–Ω–∏ “∑–∞–≤–æ–±–∏ –¥—É—Ä—É—Å—Ç –≤–∞ –Ω–æ–¥—É—Ä—É—Å—Ç
        var updatedMarkup = UpdateButtonsMarkup(questionId, selectedOption, isCorrect, correctAnswer, question);
        await _client.EditMessageReplyMarkupAsync(chatId, questionInfo.MessageId, replyMarkup: updatedMarkup, cancellationToken: cancellationToken);

        // –°–∞–±—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ö–æ–ª“≥–æ –∞–≥–∞—Ä “∑–∞–≤–æ–± –¥—É—Ä—É—Å—Ç –±–æ—à–∞–¥
        if (isCorrect)
        {
            _userScores[chatId]++;
            using var scope = _scopeFactory.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
            var user = await dbContext.Users.FirstOrDefaultAsync(u => u.ChatId == chatId, cancellationToken);
            if (user != null)
            {
                user.Score += 1;
                await dbContext.SaveChangesAsync(cancellationToken);
            }
        }

        // –°–∞–±—Ç –∫–∞—Ä–¥–∞–Ω–∏ “∑–∞–≤–æ–±–∏ –∫–æ—Ä–±–∞—Ä
        var userResponse = new UserResponse { ChatId = chatId, QuestionId = questionId, SelectedOption = selectedOptionText, IsCorrect = isCorrect };
        await responseService.SaveUserResponse(userResponse);

        // –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Å–∞–≤–æ–ª–∏ –Ω–∞–≤ –∞–≥–∞—Ä —Ç–µ—Å—Ç –∏–¥–æ–º–∞ –¥–æ—à—Ç–∞ –±–æ—à–∞–¥
        if (_userQuestions[chatId] < MaxQuestions)
        {
            await HandleNewQuestionAsync(chatId, questionService, subjectService, cancellationToken);
        }
        else
        {
            string resultText = $"<b>üìù –¢–µ—Å—Ç –±–∞ –æ—Ö–∏—Ä —Ä–∞—Å–∏–¥!</b>\n–•–æ–ª“≥–æ–∏ —à—É–º–æ: {_userScores[chatId]}/{MaxQuestions}.";
            var restartButton = new InlineKeyboardMarkup(InlineKeyboardButton.WithCallbackData("‚ôªÔ∏è –ê–∑ –Ω–∞–≤ –æ“ì–æ–∑ –∫—É–Ω–µ–¥!", "restart"));
            await _client.SendMessage(chatId, resultText, parseMode: ParseMode.Html, replyMarkup: restartButton, cancellationToken: cancellationToken);
        }
    }

    // –§—É–Ω–∫—Å–∏—è–∏ —ë—Ä–∏—Ä–∞—Å–æ–Ω –±–∞—Ä–æ–∏ —Ç–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω–∏ —Ç—É–≥–º–∞—Ö–æ–∏ inline
    private InlineKeyboardMarkup UpdateButtonsMarkup(int questionId, string selectedOption, bool isCorrect, string correctAnswer, GetQuestionWithOptionsDTO question)
    {
        var buttons = new List<InlineKeyboardButton[]>();

        // –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ “∑–∞–≤–æ–±–∏ –¥—É—Ä—É—Å—Ç (A, B, C, D)
        string correctOption = question.FirstOption.Trim() == correctAnswer ? "A" :
                              question.SecondOption.Trim() == correctAnswer ? "B" :
                              question.ThirdOption.Trim() == correctAnswer ? "C" : "D";

        // –°–æ—Ö—Ç–∞–Ω–∏ —Ç—É–≥–º–∞“≥–æ –±–æ –Ω–∏—à–æ–Ω–∞“≥–æ–∏ –º—É–≤–æ—Ñ–∏“õ
        var row1 = new List<InlineKeyboardButton>();
        var row2 = new List<InlineKeyboardButton>();

        // –¢—É–≥–º–∞–∏ A
        if (selectedOption == "A")
        {
            row1.Add(InlineKeyboardButton.WithCallbackData($"{(isCorrect ? "‚úÖ" : "‚ùå")} A", "dummy"));
        }
        else if (correctOption == "A")
        {
            row1.Add(InlineKeyboardButton.WithCallbackData("‚úÖ A", "dummy"));
        }
        else
        {
            row1.Add(InlineKeyboardButton.WithCallbackData("‚ñ´Ô∏è A", "dummy"));
        }

        // –¢—É–≥–º–∞–∏ B
        if (selectedOption == "B")
        {
            row1.Add(InlineKeyboardButton.WithCallbackData($"{(isCorrect ? "‚úÖ" : "‚ùå")} B", "dummy"));
        }
        else if (correctOption == "B")
        {
            row1.Add(InlineKeyboardButton.WithCallbackData("‚úÖ B", "dummy"));
        }
        else
        {
            row1.Add(InlineKeyboardButton.WithCallbackData("‚ñ´Ô∏è B", "dummy"));
        }

        // –¢—É–≥–º–∞–∏ C
        if (selectedOption == "C")
        {
            row2.Add(InlineKeyboardButton.WithCallbackData($"{(isCorrect ? "‚úÖ" : "‚ùå")} C", "dummy"));
        }
        else if (correctOption == "C")
        {
            row2.Add(InlineKeyboardButton.WithCallbackData("‚úÖ C", "dummy"));
        }
        else
        {
            row2.Add(InlineKeyboardButton.WithCallbackData("‚ñ´Ô∏è C", "dummy"));
        }

        // –¢—É–≥–º–∞–∏ D
        if (selectedOption == "D")
        {
            row2.Add(InlineKeyboardButton.WithCallbackData($"{(isCorrect ? "‚úÖ" : "‚ùå")} D", "dummy"));
        }
        else if (correctOption == "D")
        {
            row2.Add(InlineKeyboardButton.WithCallbackData("‚úÖ D", "dummy"));
        }
        else
        {
            row2.Add(InlineKeyboardButton.WithCallbackData("‚ñ´Ô∏è D", "dummy"));
        }

        buttons.Add(row1.ToArray());
        buttons.Add(row2.ToArray());

        return new InlineKeyboardMarkup(buttons);
    }

    // –°–∞–Ω“∑–∏—à–∏ –∞—ä–∑–æ–≥–∏–∏ –∫–æ—Ä–±–∞—Ä –¥–∞—Ä –∫–∞–Ω–∞–ª
    private async Task<bool> IsUserChannelMemberAsync(long chatId, CancellationToken cancellationToken)
    {
        try
        {
            var chatMember = await _client.GetChatMemberAsync(_channelId, chatId, cancellationToken);
            return chatMember.Status is ChatMemberStatus.Member or ChatMemberStatus.Administrator or ChatMemberStatus.Creator;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Å–∞–Ω“∑–∏—à–∏ –∞—ä–∑–æ–≥–∏–∏ –∫–∞–Ω–∞–ª: {ex.Message}");
            return false;
        }
    }

    // –°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞–∏ –∫–æ—Ä–±–∞—Ä –±–∞ –∫–∞–Ω–∞–ª
    private async Task<bool> CheckChannelSubscriptionAsync(long chatId, CancellationToken cancellationToken)
    {
        if (!await IsUserChannelMemberAsync(chatId, cancellationToken))
        {
            var keyboard = new InlineKeyboardMarkup(new[] { new[] { InlineKeyboardButton.WithUrl("–û–±—É–Ω–∞ —à—É–¥–∞–Ω –±–∞ –∫–∞–Ω–∞–ª", _channelLink) }, new[] { InlineKeyboardButton.WithCallbackData("üîÑ –°–∞–Ω“∑–∏—à", "check_subscription") } });
            await _client.SendMessage(chatId, "‚ö†Ô∏è –ë–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–æ—Ç, –∞–≤–≤–∞–ª –±–∞ –∫–∞–Ω–∞–ª–∏ –º–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥!", replyMarkup: keyboard, cancellationToken: cancellationToken);
            return false;
        }
        return true;
    }

    // –ù–∞–º–æ–∏—à–∏ —Ä”Ø–π—Ö–∞—Ç–∏ 50 –∫–æ—Ä–±–∞—Ä–∏ –±–µ“≥—Ç–∞—Ä–∏–Ω
    private async Task HandleTopCommandAsync(long chatId, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
        var topUsers = await dbContext.Users.OrderByDescending(u => u.Score).Take(50).ToListAsync(cancellationToken);
        if (topUsers.Count == 0)
        {
            await _client.SendMessage(chatId, "–†”Ø–π—Ö–∞—Ç —Ö–æ–ª–∏—Å—Ç!", cancellationToken: cancellationToken);
            return;
        }
        string GetLevelStars(int level) => new string('‚≠ê', level);
        string GetRankColor(int rank) => rank switch { 1 => "ü•á", 2 => "ü•à", 3 => "ü•â", <= 10 => "üîπ", _ => "‚ö™" };
        int cnt = 0;
        var messageText = "<b>üèÜ 50 –ë–µ“≥—Ç–∞—Ä–∏–Ω</b>\n\n<pre>#        –ù–æ–º –≤–∞ –Ω–∞—Å–∞–±         –•–æ–ª  </pre>\n<pre>----------------------------------</pre>\n";
        foreach (var user in topUsers)
        {
            cnt++;
            if (user.Name.Length > 15) user.Name = user.Name[..15] + "...";
            string levelStars = GetLevelStars(GetLevel(user.Score));
            string rankSymbol = GetRankColor(cnt);
            messageText += $"<pre>{cnt,0}.{rankSymbol} {user.Name,-20} |{user.Score,-0}|{rankSymbol,2}</pre>\n";
        }
        await _client.SendMessage(chatId, messageText, parseMode: ParseMode.Html, cancellationToken: cancellationToken);
    }

    // –ù–∞–º–æ–∏—à–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –∫–æ—Ä–±–∞—Ä
    private async Task HandleProfileCommandAsync(long chatId, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
        var user = await dbContext.Users.FirstOrDefaultAsync(u => u.ChatId == chatId, cancellationToken);
        if (user != null)
        {
            int level = GetLevel(user.Score);
            string profileText = $"<b>–ü—Ä–æ—Ñ–∏–ª:</b>\n    {user.Name}\n<b>–®–∞“≥—Ä:</b> {user.City}\n<b>–•–æ–ª:</b> {user.Score}\n<b>–°–∞—Ç“≥:</b> {level}";
            await _client.SendMessage(chatId, profileText, parseMode: ParseMode.Html, cancellationToken: cancellationToken);
        }
        else
        {
            await _client.SendMessage(chatId, "–®—É–º–æ “≥–∞–Ω”Ø–∑ —Å–∞–±—Ç–∏ –Ω–æ–º –Ω–∞—à—É–¥–∞–µ–¥. –ë–∞—Ä–æ–∏ —Å–∞–±—Ç–∏ –Ω–æ–º /register -—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.", cancellationToken: cancellationToken);
        }
    }

    // –ù–∞–º–æ–∏—à–∏ —Ä–æ“≥–Ω–∞–º–æ
    private async Task HandleHelpCommandAsync(long chatId, CancellationToken cancellationToken)
    {
        string helpText = "<b>–†–æ“≥–Ω–∞–º–æ:</b>\n/start - –æ“ì–æ–∑ –≤–∞ —Å–∞–Ω“∑–∏—à–∏ —Å–∞–±—Ç–∏ –Ω–æ–º\n/register - —Å–∞–±—Ç–∏ –Ω–æ–º–∏ “≥–∏—Å–æ–±–∏ –∫–æ—Ä–±–∞—Ä\n–û“ì–æ–∑–∏ —Ç–µ—Å—Ç - –±–∞—Ä–æ–∏ –æ“ì–æ–∑–∏ —Ç–µ—Å—Ç\n–ë–µ“≥—Ç–∞—Ä–∏–Ω“≥–æ - –¥–∏–¥–∞–Ω–∏ 50 –∫–æ—Ä–±–∞—Ä–∏ –±–µ“≥—Ç–∞—Ä–∏–Ω\n–ü—Ä–æ—Ñ–∏–ª - –¥–∏–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ —à–∞—Ö—Å–∏–∏ —à—É–º–æ\n–ö”Ø–º–∞–∫ - –¥–∏–¥–∞–Ω–∏ –∏–Ω —Ä”Ø–π—Ö–∞—Ç\n";
        await _client.SendMessage(chatId, helpText, parseMode: ParseMode.Html, cancellationToken: cancellationToken);
    }

    // “≤–∏—Å–æ–±–∏ —Å–∞—Ç“≥–∏ –∫–æ—Ä–±–∞—Ä
    private int GetLevel(int score) => score switch { <= 150 => 1, <= 300 => 2, <= 450 => 3, <= 600 => 4, _ => 5 };

    // –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω–∏ “≥–æ–ª–∞—Ç–∏ –ø–∞—ë–º“≥–æ–∏ –æ–º–º–∞–≤”£
    private void CleanupBroadcastState(long chatId)
    {
        _pendingBroadcast.Remove(chatId);
    }

    // –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º“≥–æ–∏ –æ–º–º–∞–≤”£
    private async Task HandleBroadcastMessageAsync(long chatId, string messageText, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        try
        {
            if (!await IsUserAdminAsync(chatId, cancellationToken))
            {
                CleanupBroadcastState(chatId);
                await _client.SendMessage(chatId, "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω“≥–æ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥ –ø–∞—ë–º —Ñ–∏—Ä–∏—Å—Ç–∞–Ω–¥!", replyMarkup: await GetMainButtonsAsync(chatId, cancellationToken), cancellationToken: cancellationToken);
                return;
            }
            if (string.IsNullOrWhiteSpace(messageText))
            {
                await _client.SendMessage(chatId, "‚ùå –ü–∞—ë–º –Ω–∞–º–µ—Ç–∞–≤–æ–Ω–∞–¥ —Ö–æ–ª”£ –±–æ—à–∞–¥! –õ—É—Ç—Ñ–∞–Ω, –ø–∞—ë–º–∏ –¥–∏–≥–∞—Ä –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.", cancellationToken: cancellationToken);
                return;
            }
            using var scope = _scopeFactory.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
            var users = await dbContext.Users.Select(u => u.ChatId).ToListAsync(cancellationToken);
            if (users.Count == 0)
            {
                CleanupBroadcastState(chatId);
                await _client.SendMessage(chatId, "‚ùå –î–∞—Ä “≥–æ–ª–∏ “≥–æ–∑–∏—Ä —è–≥–æ–Ω –∫–æ—Ä–±–∞—Ä –±–∞—Ä–æ–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º –Ω–µ—Å—Ç.", replyMarkup: GetAdminButtons(), cancellationToken: cancellationToken);
                return;
            }
            var statusMessage = await _client.SendMessage(chatId, $"<b>üì§ –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º –æ“ì–æ–∑ —à—É–¥...</b>\n0/{users.Count} –∫–æ—Ä–±–∞—Ä–æ–Ω", parseMode: ParseMode.Html, replyMarkup: new ReplyKeyboardRemove(), cancellationToken: cancellationToken);
            var successCount = 0;
            var failedCount = 0;
            var lastUpdateTime = DateTime.UtcNow;
            var batchSize = 30;
            for (var i = 0; i < users.Count; i += batchSize)
            {
                var batch = users.Skip(i).Take(batchSize);
                foreach (var userId in batch)
                {
                    try
                    {
                        await _client.SendMessage(userId, $"<b>üì¢ –ü–∞—ë–º–∏ –º—É“≥–∏–º:</b>\n\n{messageText}", parseMode: ParseMode.Html, cancellationToken: cancellationToken);
                        successCount++;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"–•–∞—Ç–æ–≥”£ –¥–∞—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω –±–∞ –∫–æ—Ä–±–∞—Ä {userId}: {ex.Message}");
                        failedCount++;
                    }
                    if ((DateTime.UtcNow - lastUpdateTime).TotalSeconds >= 3 || (i + 1) % 100 == 0)
                    {
                        var progress = (double)(successCount + failedCount) / users.Count * 100;
                        var progressBar = MakeProgressBar(progress);
                        await _client.EditMessageText(chatId, statusMessage.MessageId, $"<b>üì§ –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º –∏–¥–æ–º–∞ –¥–æ—Ä–∞–¥...</b>\n{progressBar}\n‚úÖ –ë–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç: {successCount}\n‚ùå –ù–æ–∫–æ–º: {failedCount}\nüìä –ü–µ—à—Ä–∞—Ñ—Ç: {progress:F1}%", parseMode: ParseMode.Html, cancellationToken: cancellationToken);
                        lastUpdateTime = DateTime.UtcNow;
                    }
                }
                await Task.Delay(500, cancellationToken);
            }
            var resultMessage = $"<b>üì¨ –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º –±–∞ –∏—Ç—Ç–æ–º —Ä–∞—Å–∏–¥!</b>\n\n‚úÖ –ë–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥: {successCount}\n‚ùå –ù–æ–∫–æ–º: {failedCount}\nüìä –§–æ–∏–∑–∏ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç: {((double)successCount / users.Count * 100):F1}%";
            await _client.SendMessage(chatId, resultMessage, parseMode: ParseMode.Html, replyMarkup: GetAdminButtons(), cancellationToken: cancellationToken);
            await NotifyAdminsAsync($"<b>üì¢ –ù–∞—Ç–∏“∑–∞–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º–∏ –æ–º–º–∞–≤”£:</b>\n\n{resultMessage}\n\nüïí –í–∞“õ—Ç: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC", cancellationToken);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–•–∞—Ç–æ–≥”£ –¥–∞—Ä –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –ø–∞—ë–º: {ex}");
            await _client.SendMessage(chatId, "‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∫–æ—Ä–∫–∞—Ä–¥–∏ –ø–∞—ë–º. –õ—É—Ç—Ñ–∞–Ω –±–æ–∑ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.", replyMarkup: GetAdminButtons(), cancellationToken: cancellationToken);
        }
        finally
        {
            CleanupBroadcastState(chatId);
        }
    }

    // Statistics
    private async Task HandleStatisticsCommandAsync(long chatId, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        try
        {
            using var scope = _scopeFactory.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();

            // Get all user stats
            var totalUsers = await dbContext.Users.CountAsync(cancellationToken);
            var activeUsers = await dbContext.UserResponses
                .Where(r => r.CreatedAt >= DateTime.UtcNow.AddDays(-7))
                .Select(r => r.ChatId)
                .Distinct()
                .CountAsync(cancellationToken);

            // Get questions per subject
            var subjects = await dbContext.Subjects.ToListAsync(cancellationToken);
            var questionCounts = await dbContext.Questions
                .GroupBy(q => q.SubjectId)
                .Select(g => new { SubjectId = g.Key, Count = g.Count() })
                .ToDictionaryAsync(g => g.SubjectId, g => g.Count, cancellationToken);

            // Calculate total questions
            var totalQuestions = await dbContext.Questions.CountAsync(cancellationToken);

            // Format subject stats ordered by question count
            var subjectStats = subjects
                .OrderByDescending(s => questionCounts.GetValueOrDefault(s.Id, 0))
                .Select(s => $"‚Ä¢ {s.Name}: {(questionCounts.TryGetValue(s.Id, out int count) ? count : 0)} —Å–∞–≤–æ–ª")
                .ToList();

            // Build nicely formatted message
            var statsMessage = 
                "<b>üìä –û–ú–û–†–ò –ë–û–¢</b>\n" +
                "<code>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</code>\n\n" +
                "<b>üë• –ö–æ—Ä–±–∞—Ä–æ–Ω:</b>\n" +
                $"‚Ä¢ “≤–∞–º–∞–≥”£: {totalUsers:N0} –Ω–∞—Ñ–∞—Ä\n" +
                $"‚Ä¢ –§–∞—ä–æ–ª (7 —Ä”Ø–∑–∏ –æ—Ö–∏—Ä): {activeUsers:N0} –Ω–∞—Ñ–∞—Ä\n" +
                "<code>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</code>\n\n" +
                "<b>üìö –°–∞–≤–æ–ª –≤–∞ —Ç–µ—Å—Ç“≥–æ:</b>\n" +
                $"‚Ä¢ “≤–∞–º–∞–≥”£ —Å–∞–≤–æ–ª“≥–æ: {totalQuestions:N0}\n" +
                "<code>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</code>\n\n" +
                "<b>üìù –°–∞–≤–æ–ª“≥–æ –∞–∑ —Ä”Ø–∏ —Ñ–∞–Ω“≥–æ:</b>\n" +
                $"{string.Join("\n", subjectStats)}";

            // Send formatted stats
            await _client.SendMessage(
                chatId,
                statsMessage,
                parseMode: ParseMode.Html,
                replyMarkup: GetAdminButtons(),
                cancellationToken: cancellationToken
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–•–∞—Ç–æ–≥”£ –¥–∞—Ä –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –æ–º–æ—Ä: {ex.Message}");
            await _client.SendMessage(chatId,
                "‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –æ–º–æ—Ä. –õ—É—Ç—Ñ–∞–Ω, –±–∞—ä–¥—Ç–∞—Ä –±–æ–∑ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.",
                replyMarkup: GetAdminButtons(),
                cancellationToken: cancellationToken);
        }
    }

    // –ë–æ—Ä–∫—É–Ω–∏–∏ —Ñ–∞–π–ª –±–æ —Å–∞–≤–æ–ª“≥–æ
    private async Task HandleFileUploadAsync(Message message, IQuestionService questionService, ISubjectService subjectService, CancellationToken cancellationToken)
    {
        if (message.Document == null) return;
        var chatId = message.Chat.Id;
        var fileName = message.Document.FileName ?? "–±–µ –Ω–æ–º.docx";
        var username = !string.IsNullOrWhiteSpace(message.From?.Username) ? $"@{message.From.Username}" : message.From?.FirstName ?? "–ö–æ—Ä–±–∞—Ä–∏ –Ω–æ–º–∞—ä–ª—É–º";
        if (!fileName.EndsWith(".docx", StringComparison.OrdinalIgnoreCase))
        {
            await _client.SendMessage(chatId, "‚ùå –õ—É—Ç—Ñ–∞–Ω, —Ç–∞–Ω“≥–æ —Ñ–∞–π–ª–∏ .docx —Ñ–∏—Ä–∏—Å—Ç–µ–¥!", cancellationToken: cancellationToken);
            return;
        }
        try
        {
            var file = await _client.GetFileAsync(message.Document.FileId, cancellationToken);
            if (file.FilePath == null) throw new Exception("–ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ä–æ“≥–∏ —Ñ–∞–π–ª –∞–∑ Telegram “ì–∞–π—Ä–∏–º—É–º–∫–∏–Ω –∞—Å—Ç");
            using var stream = new MemoryStream();
            await _client.DownloadFile(file.FilePath, stream, cancellationToken);
            stream.Position = 0;
            if (!_userCurrentSubject.TryGetValue(chatId, out int currentSubject))
            {
                await _client.SendMessage(chatId, "‚ùå –õ—É—Ç—Ñ–∞–Ω, –∞–≤–≤–∞–ª —Ñ–∞–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥!", cancellationToken: cancellationToken);
                return;
            }
            await NotifyAdminsAsync($"<b>üì• –§–∞–π–ª–∏ –Ω–∞–≤ –∞–∑ {username}</b>\n–ù–æ–º–∏ —Ñ–∞–π–ª: {fileName}\n–î–∞—Ä “≥–æ–ª–∏ –∫–æ—Ä–∫–∞—Ä–¥...", cancellationToken);
            var questions = ParseQuestionsDocx.ParseQuestionsFromDocx(stream, currentSubject);
            foreach (var question in questions) await questionService.CreateQuestion(question);
            var successMessage = $"<b>‚úÖ {questions.Count} —Å–∞–≤–æ–ª –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ —à—É–¥!</b>";
            await _client.SendMessage(chatId, successMessage, parseMode: ParseMode.Html, cancellationToken: cancellationToken);
            await NotifyAdminsAsync($"<b>‚úÖ –ê–∑ —Ñ–∞–π–ª–∏ {fileName}</b>\n–ê–∑ “∑–æ–Ω–∏–±–∏ {username} —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥,\n{questions.Count} —Å–∞–≤–æ–ª –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ —à—É–¥!", cancellationToken);
        }
        catch (Exception ex)
        {
            var errorMessage = $"<b>‚ùå –•–∞—Ç–æ–≥”£:</b> {ex.Message}";
            await _client.SendMessage(chatId, errorMessage, parseMode: ParseMode.Html, cancellationToken: cancellationToken);
            await NotifyAdminsAsync($"<b>‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∫–æ—Ä–∫–∞—Ä–¥–∏ —Ñ–∞–π–ª:</b>\n–§–∞–π–ª: {fileName}\n–ö–æ—Ä–±–∞—Ä: {username}\n–•–∞—Ç–æ–≥”£: {ex.Message}", cancellationToken);
        }
    }

    // –û–≥–æ“≥ –∫–∞—Ä–¥–∞–Ω–∏ –∞–¥–º–∏–Ω“≥–æ
    private async Task NotifyAdminsAsync(string message, CancellationToken cancellationToken)
    {
        try
        {
            var chatMembers = await _client.GetChatAdministratorsAsync(_channelId, cancellationToken);
            foreach (var member in chatMembers)
            {
                if (member.Status is ChatMemberStatus.Creator or ChatMemberStatus.Administrator)
                {
                    try
                    {
                        await _client.SendMessage(member.User.Id, message, parseMode: ParseMode.Html, cancellationToken: cancellationToken);
                    }
                    catch (Exception) { }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –æ–≥–æ“≥ –∫–∞—Ä–¥–∞–Ω–∏ –∞–¥–º–∏–Ω“≥–æ: {ex.Message}");
        }
    }

    // –°–∞–Ω“∑–∏—à–∏ –≤–∞–∑—ä–∏ –∞–¥–º–∏–Ω
    private async Task<bool> IsUserAdminAsync(long chatId, CancellationToken cancellationToken)
    {
        try
        {
            var chatMember = await _client.GetChatMemberAsync(_channelId, chatId, cancellationToken);
            return chatMember.Status is ChatMemberStatus.Creator or ChatMemberStatus.Administrator;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Å–∞–Ω“∑–∏—à–∏ –≤–∞–∑—ä–∏ –∞–¥–º–∏–Ω: {ex.Message}");
            return false;
        }
    }

    // –¢—É–≥–º–∞“≥–æ–∏ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω
    private IReplyMarkup GetAdminButtons()
    {
        return new ReplyKeyboardMarkup(new List<List<KeyboardButton>> 
        { 
            new() { new KeyboardButton("üìö –ò–Ω—Ç–∏—Ö–æ–±–∏ —Ñ–∞–Ω") }, 
            new() { new KeyboardButton("üìä –û–º–æ—Ä"), new KeyboardButton("üìù –°–∞–≤–æ–ª“≥–æ") }, 
            new() { new KeyboardButton("üì¢ –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º") }, 
            new() { new KeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç") } 
        }) { ResizeKeyboard = true };
    }

    // –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω
    private async Task HandleAdminCommandAsync(long chatId, CancellationToken cancellationToken)
    {
        var isAdmin = await IsUserAdminAsync(chatId, cancellationToken);
        if (!isAdmin)
        {
            await _client.SendMessage(chatId, "‚ùå –ë—É–±–∞—Ö—à–µ–¥, —à—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥!\n–ë–∞—Ä–æ–∏ –∞–¥–º–∏–Ω —à—É–¥–∞–Ω, –±–∞ –∫–∞–Ω–∞–ª “≥–∞–º—á—É–Ω –º–∞—ä–º—É—Ä —ë —Å–æ–∑–∞–Ω–¥–∞ –∏–ª–æ–≤–∞ —à–∞–≤–µ–¥.", cancellationToken: cancellationToken);
            return;
        }
        await _client.SendMessage(chatId, "–•—É—à –æ–º–∞–µ–¥ –±–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω!\n–õ—É—Ç—Ñ–∞–Ω, –∞–º–∞–ª—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", replyMarkup: GetAdminButtons(), cancellationToken: cancellationToken);
    }

    // –°–æ—Ö—Ç–∞–Ω–∏ –Ω–∞–≤–æ—Ä–∏ –ø–µ—à—Ä–∞—Ñ—Ç
    private string MakeProgressBar(double percent)
    {
        var filledCount = (int)(percent / 10);
        var emptyCount = 10 - filledCount;
        return $"[{new string('‚ñà', filledCount)}{new string('‚ñë', emptyCount)}]";
    }
}