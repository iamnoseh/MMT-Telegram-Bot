using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using TelegramBot.Domain.DTOs;
using TelegramBot.Domain.Entities;
using TelegramBot.Services.OptionServices;
using TelegramBot.Services.QuestionService;
using TelegramBot.Services.SubjectService;
using TelegramBot.Services.UserResponceService;
using User = TelegramBot.Domain.Entities.User;
using Microsoft.EntityFrameworkCore;

namespace TelegramBot.Services;

public class TelegramBotHostedService : IHostedService
{
    private readonly IServiceScopeFactory _scopeFactory;
    private readonly IConfiguration _configuration;
    private readonly TelegramBotClient _client;
    private readonly string _channelId;
    private readonly string _channelLink;
    private readonly Dictionary<long, RegistrationInfo> _pendingRegistrations = new();
    private readonly Dictionary<long, int> _userScores = new();
    private readonly Dictionary<long, int> _userQuestions = new();
    private readonly Dictionary<long, bool> _pendingBroadcast = new();
    private readonly Dictionary<long, int> _userCurrentSubject = new();
    private const int MaxQuestions = 10;

    public TelegramBotHostedService(IServiceScopeFactory scopeFactory, IConfiguration configuration)
    {
        _scopeFactory = scopeFactory;
        _configuration = configuration;
        var token = configuration["BotConfiguration:Token"]
            ?? throw new ArgumentNullException("Telegram Bot Token is not configured!");
        _client = new TelegramBotClient(token);
        _channelId = configuration["TelegramChannel:ChannelId"]
            ?? throw new ArgumentNullException("Channel ID is not configured!");
        _channelLink = configuration["TelegramChannel:ChannelLink"]
            ?? throw new ArgumentNullException("Channel Link is not configured!");
    }

    public async Task StartAsync(CancellationToken cancellationToken)
    {
        try
        {
            var me = await _client.GetMeAsync(cancellationToken);
            Console.WriteLine($"Bot connected as: {me.Username}");

            var offset = 0;
            while (!cancellationToken.IsCancellationRequested)
            {
                try
                {
                    var updates = await _client.GetUpdatesAsync(offset, cancellationToken: cancellationToken);
                    foreach (var update in updates)
                    {
                        await HandleUpdateAsync(update, cancellationToken);
                        offset = update.Id + 1;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error in polling: {ex.Message}");
                    await Task.Delay(1000, cancellationToken);
                }
                await Task.Delay(500, cancellationToken);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting bot: {ex.Message}");
        }
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        Console.WriteLine("Bot is stopping...");
        return Task.CompletedTask;
    }

    private async Task HandleUpdateAsync(Update update, CancellationToken cancellationToken)
    {
        if (update.Type == UpdateType.Message && update.Message != null)
        {
            var message = update.Message;
            var chatId = message.Chat.Id;
            var text = message.Text;

            using var scope = _scopeFactory.CreateScope();
            var questionService = scope.ServiceProvider.GetRequiredService<IQuestionService>();
            var optionService = scope.ServiceProvider.GetRequiredService<IOptionService>();
            var responseService = scope.ServiceProvider.GetRequiredService<IResponseService>();
            var subjectService = scope.ServiceProvider.GetRequiredService<ISubjectService>();

            if (_pendingBroadcast.ContainsKey(chatId) && _pendingBroadcast[chatId])
            {
                if (await IsUserAdminAsync(chatId, cancellationToken))
                {
                    await HandleBroadcastMessageAsync(chatId, text, scope.ServiceProvider, cancellationToken);
                    return;
                }
                else
                {
                    _pendingBroadcast.Remove(chatId);
                    await _client.SendMessage(chatId, "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω“≥–æ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥ –ø–∞—ë–º —Ñ–∏—Ä–∏—Å—Ç–∞–Ω–¥!", cancellationToken: cancellationToken);
                }
            }

            if (message.Document != null)
            {
                if (await IsUserAdminAsync(chatId, cancellationToken))
                {
                    if (!_userCurrentSubject.ContainsKey(chatId))
                    {
                        await _client.SendMessage(chatId,
                            "‚ùå –õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª —Ñ–∞–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥!",
                            replyMarkup: await GetMainButtonsAsync(chatId, cancellationToken),
                            cancellationToken: cancellationToken);
                        return;
                    }
                    await HandleFileUploadAsync(message, questionService, subjectService, cancellationToken);
                }
                else
                {
                    await _client.SendMessage(chatId,
                        "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω“≥–æ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥ —Ñ–∞–π–ª –±–æ—Ä–≥—É–∑–æ—Ä”£ –∫—É–Ω–∞–Ω–¥!",
                        cancellationToken: cancellationToken);
                }
                return;
            }

            if (text != "/start" && text != "/register")
            {
                if (!await CheckChannelSubscriptionAsync(chatId, cancellationToken))
                {
                    return;
                }
            }

            if (message.Contact != null)
            {
                await HandleContactRegistrationAsync(message, scope.ServiceProvider, cancellationToken);
                return;
            }

            if (_pendingRegistrations.ContainsKey(chatId))
            {
                var reg = _pendingRegistrations[chatId];
                if (!reg.IsNameReceived)
                {
                    await HandleNameRegistrationAsync(chatId, text, cancellationToken);
                    return;
                }
                else if (reg.IsNameReceived && !reg.IsCityReceived)
                {
                    await HandleCityRegistrationAsync(chatId, text, scope.ServiceProvider, cancellationToken);
                    return;
                }
            }

            switch (text)
            {
                case "/start":
                    if (!await IsUserRegisteredAsync(chatId, scope.ServiceProvider, cancellationToken))
                    {
                        await SendRegistrationRequestAsync(chatId, cancellationToken);
                    }
                    else
                    {
                        await _client.SendMessage(chatId,
                            "–•—É—à –æ–º–∞–¥–µ–¥! –ë–∞—Ä–æ–∏ –æ“ì–æ–∑ —Ç—É–≥–º–∞–∏ '–°–∞–≤–æ–ª–∏ –Ω–∞–≤'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.",
                            replyMarkup: await GetMainButtonsAsync(chatId, cancellationToken),
                            cancellationToken: cancellationToken);
                    }
                    break;

                case "/register":
                    if (!await IsUserRegisteredAsync(chatId, scope.ServiceProvider, cancellationToken))
                    {
                        await SendRegistrationRequestAsync(chatId, cancellationToken);
                    }
                    else
                    {
                        await _client.SendMessage(chatId,
                            "–®—É–º–æ –∞–ª–ª–∞–∫–∞–π —Å–∞–±—Ç —à—É–¥–∞–µ–¥!",
                            cancellationToken: cancellationToken);
                    }
                    break;

                case "‚ùì –°–∞–≤–æ–ª–∏ –Ω–∞–≤":
                    if (!await IsUserRegisteredAsync(chatId, scope.ServiceProvider, cancellationToken))
                    {
                        await _client.SendMessage(chatId,
                            "–õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª –±–∞ –±–æ—Ç —Å–∞–±—Ç —à–∞–≤–µ–¥. –ë–∞—Ä–æ–∏ —Å–∞–±—Ç /register-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.",
                            cancellationToken: cancellationToken);
                    }
                    else
                    {
                        await HandleNewQuestionAsync(chatId, questionService, subjectService, cancellationToken);
                    }
                    break;

                case "üèÜ –¢–æ–ø":
                    await HandleTopCommandAsync(chatId, scope.ServiceProvider, cancellationToken);
                    break;

                case "üë§ –ü—Ä–æ—Ñ–∏–ª":
                    await HandleProfileCommandAsync(chatId, scope.ServiceProvider, cancellationToken);
                    break;

                case "‚ÑπÔ∏è –ö—É–º–∞–∫":
                    await HandleHelpCommandAsync(chatId, cancellationToken);
                    break;

                case "üìö –ò–Ω—Ç–∏—Ö–æ–±–∏ —Ñ–∞–Ω":
                    var subjectKeyboard = new ReplyKeyboardMarkup
                    {
                        Keyboard = new List<List<KeyboardButton>>
                        {
                            new() { new KeyboardButton("üß™ –•–∏–º–∏—è"), new KeyboardButton("üî¨ –ë–∏–æ–ª–æ–≥–∏—è") },
                            new() { new KeyboardButton("üìñ –ó–∞–±–æ–Ω–∏ —Ç–æ“∑–∏–∫”£"), new KeyboardButton("üåç English") },
                            new() { new KeyboardButton("üìú –¢–∞—ä—Ä–∏—Ö") },
                            new() { new KeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç") }
                        },
                        ResizeKeyboard = true
                    };
                    await _client.SendMessage(chatId,
                        "–õ—É—Ç—Ñ–∞–Ω —Ñ–∞–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
                        replyMarkup: subjectKeyboard,
                        cancellationToken: cancellationToken);
                    break;

                case "üß™ –•–∏–º–∏—è":
                case "üî¨ –ë–∏–æ–ª–æ–≥–∏—è":
                case "üìñ –ó–∞–±–æ–Ω–∏ —Ç–æ“∑–∏–∫ƒ´":
                case "üåç English":
                case "üìú –¢–∞—ä—Ä–∏—Ö":
                    await HandleSubjectSelectionAsync(chatId, text, cancellationToken);
                    break;

                case "‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç":
                    await _client.SendMessage(chatId,
                        "–ú–µ–Ω—é–∏ –∞—Å–æ—Å”£",
                        replyMarkup: await GetMainButtonsAsync(chatId, cancellationToken),
                        cancellationToken: cancellationToken);
                    break;

                case "üë®‚Äçüíº –ê–¥–º–∏–Ω":
                    await HandleAdminCommandAsync(chatId, cancellationToken);
                    break;

                case "üì¢ –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º":
                    if (await IsUserAdminAsync(chatId, cancellationToken))
                    {
                        _pendingBroadcast[chatId] = true;
                        await _client.SendMessage(chatId,
                            "–õ—É—Ç—Ñ–∞–Ω –ø–∞—ë–º–∏ —Ö—É–¥—Ä–æ –±–∞—Ä–æ–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω –±–∞ “≥–∞–º–∞–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
                            replyMarkup: new ReplyKeyboardRemove(),
                            cancellationToken: cancellationToken);
                    }
                    else
                    {
                        await _client.SendMessage(chatId,
                            "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω“≥–æ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥ –ø–∞—ë–º —Ñ–∏—Ä–∏—Å—Ç–∞–Ω–¥!",
                            cancellationToken: cancellationToken);
                    }
                    break;

                case "üìä –û–º–æ—Ä":
                    if (await IsUserAdminAsync(chatId, cancellationToken))
                    {
                        await HandleStatisticsCommandAsync(chatId, scope.ServiceProvider, cancellationToken);
                    }
                    else
                    {
                        await _client.SendMessage(chatId,
                            "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω“≥–æ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥ –æ–º–æ—Ä—Ä–æ –±—É–±–∏–Ω–∞–Ω–¥!",
                            cancellationToken: cancellationToken);
                    }
                    break;

                case "üìù –°–∞–≤–æ–ª“≥–æ":
                    if (await IsUserAdminAsync(chatId, cancellationToken))
                    {
                        await _client.SendMessage(chatId,
                            "–§—É–Ω–∫—Å–∏—è–∏ '–°–∞–≤–æ–ª“≥–æ' “≥–∞–Ω”Ø–∑ –∞–º–∞–ª”£ –Ω–∞—à—É–¥–∞–∞—Å—Ç.",
                            replyMarkup: await GetAdminButtonsAsync(cancellationToken),
                            cancellationToken: cancellationToken);
                    }
                    else
                    {
                        await _client.SendMessage(chatId,
                            "‚ùå –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω“≥–æ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥ —Å–∞–≤–æ–ª“≥–æ—Ä–æ –±—É–±–∏–Ω–∞–Ω–¥!",
                            cancellationToken: cancellationToken);
                    }
                    break;

                default:
                    await _client.SendMessage(chatId, "–§–∞—Ä–º–æ–Ω–∏ –Ω–æ–¥—É—Ä—É—Å—Ç!", cancellationToken: cancellationToken);
                    break;
            }
        }
        else if (update.Type == UpdateType.CallbackQuery && update.CallbackQuery != null)
        {
            using var scope = _scopeFactory.CreateScope();
            var questionService = scope.ServiceProvider.GetRequiredService<IQuestionService>();
            var responseService = scope.ServiceProvider.GetRequiredService<IResponseService>();
            await HandleCallbackQueryAsync(update.CallbackQuery, questionService, responseService, cancellationToken);
        }
    }

    // Registration Methods
    private async Task<bool> IsUserRegisteredAsync(long chatId, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
        return await dbContext.Users.AnyAsync(u => u.ChatId == chatId, cancellationToken);
    }

    private async Task SendRegistrationRequestAsync(long chatId, CancellationToken cancellationToken)
    {
        var requestContactButton = new KeyboardButton("Telephone Number") { RequestContact = true };
        var keyboard = new ReplyKeyboardMarkup(new List<KeyboardButton> { requestContactButton })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = true
        };

        await _client.SendMessage(chatId,
            "–ë–∞—Ä–æ–∏ —Å–∞–±—Ç –∫–∞—Ä–¥–∞–Ω, –ª—É—Ç—Ñ–∞–Ω —Ç—É–≥–º–∞–∏ –∑–µ—Ä—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥!",
            replyMarkup: keyboard,
            cancellationToken: cancellationToken);
    }

    private async Task HandleContactRegistrationAsync(Message message, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        var chatId = message.Chat.Id;
        var contact = message.Contact;

        var autoUsername = !string.IsNullOrWhiteSpace(message.Chat.Username)
            ? message.Chat.Username
            : message.Chat.FirstName;

        if (!_pendingRegistrations.ContainsKey(chatId))
        {
            _pendingRegistrations[chatId] = new RegistrationInfo
            {
                Contact = contact,
                AutoUsername = autoUsername,
                IsNameReceived = false,
                IsCityReceived = false
            };

            await _client.SendMessage(chatId,
                "–¢–∞—à–∞–∫–∫—É—Ä! –ê–∫–Ω—É–Ω, –ª—É—Ç—Ñ–∞–Ω –Ω–æ–º–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.",
                replyMarkup: new ReplyKeyboardRemove(),
                cancellationToken: cancellationToken);
        }
        else
        {
            await _client.SendMessage(chatId,
                "–õ—É—Ç—Ñ–∞–Ω –Ω–æ–º–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥, —Ç–æ —Å–∞–±—Ç –±–∞ –∏—Ç–º–æ–º —Ä–∞—Å–∞–¥.",
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandleNameRegistrationAsync(long chatId, string name, CancellationToken cancellationToken)
    {
        if (!_pendingRegistrations.ContainsKey(chatId))
            return;

        var regInfo = _pendingRegistrations[chatId];
        regInfo.Name = name;
        regInfo.IsNameReceived = true;

        await _client.SendMessage(chatId,
            "–õ—É—Ç—Ñ–∞–Ω —à–∞“≥—Ä–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.",
            replyMarkup: new ReplyKeyboardRemove(),
            cancellationToken: cancellationToken);
    }

    private async Task HandleCityRegistrationAsync(long chatId, string city, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        if (!_pendingRegistrations.ContainsKey(chatId))
            return;

        var regInfo = _pendingRegistrations[chatId];
        regInfo.City = city;
        regInfo.IsCityReceived = true;

        try
        {
            using var scope = _scopeFactory.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();

            var user = new User
            {
                ChatId = chatId,
                Username = regInfo.AutoUsername,
                Name = regInfo.Name,
                PhoneNumber = regInfo.Contact.PhoneNumber,
                City = regInfo.City,
                Score = 0
            };

            dbContext.Users.Add(user);
            await dbContext.SaveChangesAsync(cancellationToken);

            await _client.SendMessage(chatId,
                "–°–∞–±—Ç–∏ —à—É–º–æ –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∞–Ω“∑–æ–º —ë—Ñ—Ç!\n–ë–∞—Ä–æ–∏ –æ“ì–æ–∑ —Ç—É–≥–º–∞–∏ '–°–∞–≤–æ–ª–∏ –Ω–∞–≤'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥!",
                replyMarkup: await GetMainButtonsAsync(chatId, cancellationToken),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving user registration: {ex.Message}");
            await _client.SendMessage(chatId,
                "–î–∞—Ä —Å–∞–±—Ç–∏ –º–∞—ä–ª—É–º–æ—Ç —Ö–∞—Ç–æ–µ —Ä”Ø–π –¥–æ–¥. –õ—É—Ç—Ñ–∞–Ω –±–∞—ä–¥—Ç–∞—Ä –∫”Ø—à–∏—à –Ω–∞–º–æ–µ–¥.",
                cancellationToken: cancellationToken);
        }
        finally
        {
            _pendingRegistrations.Remove(chatId);
        }
    }

    // Question Methods
    private async Task<IReplyMarkup> GetMainButtonsAsync(long chatId, CancellationToken cancellationToken)
    {
        var isAdmin = await IsUserAdminAsync(chatId, cancellationToken);
        var buttons = new List<List<KeyboardButton>>();

        buttons.Add(new() { new KeyboardButton("üìö –ò–Ω—Ç–∏—Ö–æ–±–∏ —Ñ–∞–Ω"), new KeyboardButton("‚ùì –°–∞–≤–æ–ª–∏ –Ω–∞–≤") });
        buttons.Add(new() { new KeyboardButton("üèÜ –¢–æ–ø"), new KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª") });

        if (isAdmin)
        {
            buttons.Add(new() { new KeyboardButton("‚ÑπÔ∏è –ö—É–º–∞–∫"), new KeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω") });
        }
        else
        {
            buttons.Add(new() { new KeyboardButton("‚ÑπÔ∏è –ö—É–º–∞–∫") });
        }

        return new ReplyKeyboardMarkup(buttons) { ResizeKeyboard = true };
    }

    private IReplyMarkup GetButtons(int questionId)
    {
        return new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("A", $"{questionId}_A"),
                InlineKeyboardButton.WithCallbackData("B", $"{questionId}_B")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("C", $"{questionId}_C"),
                InlineKeyboardButton.WithCallbackData("D", $"{questionId}_D")
            }
        });
    }

    private async Task HandleSubjectSelectionAsync(long chatId, string text, CancellationToken cancellationToken)
    {
        int subjectId = text switch
        {
            "üß™ –•–∏–º–∏—è" => 1,
            "üî¨ –ë–∏–æ–ª–æ–≥–∏—è" => 2,
            "üìñ –ó–∞–±–æ–Ω–∏ —Ç–æ“∑–∏–∫ƒ´" => 3,
            "üåç English" => 4,
            "üìú –¢–∞—ä—Ä–∏—Ö" => 5,
            _ => 0
        };

        if (subjectId == 0)
            return;

        _userCurrentSubject[chatId] = subjectId;

        var isAdmin = await IsUserAdminAsync(chatId, cancellationToken);
        var buttons = new List<List<KeyboardButton>>();
        string message;

        if (isAdmin)
        {
            buttons.Add(new() { new KeyboardButton("üì§ –ë–æ—Ä–≥—É–∑–æ—Ä–∏–∏ —Ñ–∞–π–ª") });
            message = $"–®—É–º–æ —Ñ–∞–Ω–Ω–∏ {text}-—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫–∞—Ä–¥–µ–¥.\n" +
                      "–ë–∞—Ä–æ–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Å–∞–≤–æ–ª“≥–æ —Ñ–∞–π–ª–∏ .docx-—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥.";
        }
        else
        {
            message = $"–®—É–º–æ —Ñ–∞–Ω–Ω–∏ {text}-—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫–∞—Ä–¥–µ–¥.\n" +
                      "–ë–∞—Ä–æ–∏ –æ“ì–æ–∑–∏ —Ç–µ—Å—Ç —Ç—É–≥–º–∞–∏ '–°–∞–≤–æ–ª–∏ –Ω–∞–≤'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.";
        }

        buttons.Add(new() { new KeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç") });

        var keyboard = new ReplyKeyboardMarkup(buttons)
        {
            ResizeKeyboard = true
        };

        await _client.SendMessage(chatId, message, replyMarkup: keyboard, cancellationToken: cancellationToken);
    }

    private async Task HandleNewQuestionAsync(long chatId, IQuestionService questionService, ISubjectService subjectService, CancellationToken cancellationToken)
    {
        if (!_userCurrentSubject.TryGetValue(chatId, out int currentSubject))
        {
            await _client.SendMessage(chatId,
                "‚ùå –õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª —Ñ–∞–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥!",
                replyMarkup: await GetMainButtonsAsync(chatId, cancellationToken),
                cancellationToken: cancellationToken);
            return;
        }

        if (!_userQuestions.ContainsKey(chatId))
        {
            _userQuestions[chatId] = 0;
            _userScores[chatId] = 0;
        }

        if (_userQuestions[chatId] >= MaxQuestions)
        {
            string res;
            if (_userScores[chatId] == MaxQuestions)
            {
                res = $"üéâ –û—Ñ–∞—Ä–∏–Ω! –®—É–º–æ 100% —Ö–æ–ª“≥–æ—Ä–æ —Å–æ“≥–∏–± —à—É–¥–µ–¥!\n" +
                      $"–•–æ–ª“≥–æ–∏ —à—É–º–æ: {_userScores[chatId]}/{MaxQuestions}.";
            }
            else
            {
                res = $"üìù –¢–µ—Å—Ç –±–∞ –æ—Ö–∏—Ä —Ä–∞—Å–∏–¥!\n" +
                      $"–•–æ–ª“≥–æ–∏ —à—É–º–æ: {_userScores[chatId]}/{MaxQuestions}.\n" +
                      $"‚ôªÔ∏è –ê–∑ –Ω–∞–≤ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥!";
            }

            await _client.SendMessage(chatId, res,
                replyMarkup: new InlineKeyboardMarkup(
                    InlineKeyboardButton.WithCallbackData("Ô∏è‚ôªÔ∏è –ê–∑ –Ω–∞–≤ –æ“ì–æ–∑ –∫–∞—Ä–¥–∞–Ω!", "restart")),
                cancellationToken: cancellationToken);
            return;
        }

        var question = await questionService.GetRandomQuestionBySubject(currentSubject);
        if (question != null)
        {
            _userQuestions[chatId]++;
            await _client.SendMessage(chatId,
                $"üìö –§–∞–Ω: {question.SubjectName}\n\n" +
                $"‚ùì {question.QuestionText}\n\n" +
                $"A) {question.FirstOption}\n" +
                $"B) {question.SecondOption}\n" +
                $"C) {question.ThirdOption}\n" +
                $"D) {question.FourthOption}",
                replyMarkup: GetButtons(question.QuestionId),
                cancellationToken: cancellationToken);
        }
        else
        {
            await _client.SendMessage(chatId,
                "‚ùå –î–∞—Ä –∞–π–Ω–∏ –∑–∞–º–æ–Ω —Å–∞–≤–æ–ª“≥–æ –±–∞—Ä–æ–∏ –∏–Ω —Ñ–∞–Ω –¥–∞—Å—Ç—Ä–∞—Å –Ω–µ—Å—Ç–∞–Ω–¥.",
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandleCallbackQueryAsync(CallbackQuery callbackQuery, IQuestionService questionService, IResponseService responseService, CancellationToken cancellationToken)
    {
        if (callbackQuery.Message?.Chat == null || callbackQuery.Data == null)
            return;

        var chatId = callbackQuery.Message.Chat.Id;
        var messageId = callbackQuery.Message.MessageId;

        if (callbackQuery.Data == "check_subscription")
        {
            if (await IsUserChannelMemberAsync(chatId, cancellationToken))
            {
                await _client.DeleteMessageAsync(chatId, messageId, cancellationToken);
                await _client.SendMessage(chatId,
                    "‚úÖ –¢–∞—à–∞–∫–∫—É—Ä –±–∞—Ä–æ–∏ –æ–±—É–Ω–∞! –ê–∫–Ω—É–Ω —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –∞–∑ –±–æ—Ç –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.",
                    cancellationToken: cancellationToken);
                return;
            }
            else
            {
                await _client.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚ùå –®—É–º–æ “≥–æ–ª–æ –±–∞ –∫–∞–Ω–∞–ª –æ–±—É–Ω–∞ –Ω–∞—à—É–¥–∞–µ–¥!",
                    showAlert: true,
                    cancellationToken: cancellationToken);
                return;
            }
        }

        var callbackData = callbackQuery.Data.Split('_');

        if (callbackQuery.Data == "restart")
        {
            _userScores[chatId] = 0;
            _userQuestions[chatId] = 0;

            await _client.EditMessageTextAsync(chatId, messageId,
                "–ë–∞—Ä–æ–∏ —Ç–µ—Å—Ç –æ–º–æ–¥–∞–µ–¥? –ë–∞—Ä–æ–∏ –æ“ì–æ–∑ \"–°–∞–≤–æ–ª–∏ –Ω–∞–≤\"-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.",
                cancellationToken: cancellationToken);
            return;
        }

        if (!int.TryParse(callbackData[0], out int questionId))
            return;

        var question = await questionService.GetQuestionById(questionId);
        if (question == null)
        {
            await _client.EditMessageTextAsync(chatId, messageId, "–°–∞–≤–æ–ª —ë—Ñ—Ç –Ω–∞—à—É–¥.", cancellationToken: cancellationToken);
            return;
        }

        if (!_userScores.ContainsKey(chatId))
        {
            _userScores[chatId] = 0;
        }

        var selectedOption = callbackData[1].Trim().ToUpper();
        string selectedOptionText = selectedOption switch
        {
            "A" => question.FirstOption.Trim(),
            "B" => question.SecondOption.Trim(),
            "C" => question.ThirdOption.Trim(),
            "D" => question.FourthOption.Trim(),
            _ => ""
        };

        string correctAnswer = question.Answer.Trim();
        bool isCorrect = selectedOptionText == correctAnswer;

        if (isCorrect)
        {
            _userScores[chatId]++;
            await _client.EditMessageTextAsync(chatId, messageId, "–û—Ñ–∞—Ä–∏–Ω! +1 –±–∞–ª–ª", cancellationToken: cancellationToken);

            using var scope = _scopeFactory.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
            var user = await dbContext.Users.FirstOrDefaultAsync(u => u.ChatId == chatId, cancellationToken);
            if (user != null)
            {
                user.Score += 1;
                await dbContext.SaveChangesAsync(cancellationToken);
            }
        }
        else
        {
            await _client.EditMessageTextAsync(chatId, messageId,
                $"‚ùå –ê—Ñ—Å≈´—Å! “∂–∞–≤–æ–±–∏ —à—É–º–æ –Ω–æ–¥—É—Ä—É—Å—Ç!\n" +
                $"üí° “∂–∞–≤–æ–±–∏ –¥—É—Ä—É—Å—Ç: {correctAnswer} –±—É–¥.",
                cancellationToken: cancellationToken);
        }

        var userResponse = new UserResponse
        {
            ChatId = chatId,
            QuestionId = questionId,
            SelectedOption = selectedOptionText,
            IsCorrect = isCorrect
        };
        await responseService.SaveUserResponse(userResponse);
    }

    private async Task<bool> IsUserChannelMemberAsync(long chatId, CancellationToken cancellationToken)
    {
        try
        {
            var chatMember = await _client.GetChatMemberAsync(_channelId, chatId, cancellationToken);
            var isValid = chatMember.Status is ChatMemberStatus.Member
                         or ChatMemberStatus.Administrator
                         or ChatMemberStatus.Creator;

            Console.WriteLine($"Checking subscription for user {chatId}: Status={chatMember.Status}, IsValid={isValid}");
            return isValid;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking channel membership: {ex.Message}");
            return false;
        }
    }

    private async Task<bool> CheckChannelSubscriptionAsync(long chatId, CancellationToken cancellationToken)
    {
        if (!await IsUserChannelMemberAsync(chatId, cancellationToken))
        {
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithUrl("–û–±—É–Ω–∞ —à—É–¥–∞–Ω –±–∞ –∫–∞–Ω–∞–ª", _channelLink)
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üîÑ –¢–∞—Ñ—Ç–∏—à", "check_subscription")
                }
            });

            await _client.SendMessage(chatId,
                "‚ö†Ô∏è –ë–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–æ—Ç, –ª—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª –±–∞ –∫–∞–Ω–∞–ª–∏ –º–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥!",
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);
            return false;
        }
        return true;
    }

    // Top & Profile & Help
    private async Task HandleTopCommandAsync(long chatId, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
        var topUsers = await dbContext.Users.OrderByDescending(u => u.Score).Take(50).ToListAsync(cancellationToken);

        if (topUsers.Count == 0)
        {
            await _client.SendMessage(chatId, "–õ–∏—Å—Ç —Ö–æ–ªƒ´ –∞—Å—Ç!", cancellationToken: cancellationToken);
            return;
        }

        string GetLevelStars(int level)
        {
            return new string('‚≠ê', level);
        }

        string GetRankColor(int rank)
        {
            return rank switch
            {
                1 => "ü•á",
                2 => "ü•à",
                3 => "ü•â",
                <= 10 => "üîπ",
                _ => "‚ö™"
            };
        }

        int cnt = 0;
        var messageText = "<b>üèÜ –¢–æ–ø 50 –ë–µ“≥—Ç–∞—Ä–∏–Ω“≥–æ</b>\n\n"
                          + "<pre>#        –ù–æ–º –≤–∞ –ù–∞—Å–∞–±         –•–æ–ª  </pre>\n"
                          + "<pre>----------------------------------</pre>\n";

        foreach (var user in topUsers)
        {
            cnt++;
            if (user.Name.Length > 15)
            {
                user.Name = user.Name[..15] + "...";
            }
            string levelStars = GetLevelStars(GetLevel(user.Score));
            string rankSymbol = GetRankColor(cnt);
            messageText += $"<pre>{cnt,0}.{rankSymbol} {user.Name,-20} |{user.Score,-0}|{rankSymbol,2}</pre>\n";
        }

        await _client.SendMessage(chatId, messageText, parseMode: ParseMode.Html, cancellationToken: cancellationToken);
    }

    private async Task HandleProfileCommandAsync(long chatId, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
        var user = await dbContext.Users.FirstOrDefaultAsync(u => u.ChatId == chatId, cancellationToken);
        if (user != null)
        {
            int level = GetLevel(user.Score);
            string profileText = $"Profile:\n    {user.Name}\n" +
                                 $"–®–∞“≥—Ä: {user.City}\n" +
                                 $"Score: {user.Score}\n" +
                                 $"–õ–µ–≤–µ–ª: {level}";
            await _client.SendMessage(chatId, profileText, cancellationToken: cancellationToken);
        }
        else
        {
            await _client.SendMessage(chatId,
                "–®—É–º–æ “≥–∞–Ω≈´–∑ —Å–∞–±—Ç –Ω–∞—à—É–¥–∞–µ–¥. –õ—É—Ç—Ñ–∞–Ω –±–∞—Ä–æ–∏ —Å–∞–±—Ç /register-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.",
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandleHelpCommandAsync(long chatId, CancellationToken cancellationToken)
    {
        string helpText = "–î–∞—Å—Ç—É—Ä“≥–æ:\n" +
                          "/start - –æ“ì–æ–∑ –≤–∞ —Å–∞–Ω“∑–∏—à–∏ —Å–∞–±—Ç —à—É–¥–∞–Ω\n" +
                          "/register - —Å–∞–±—Ç –∫–∞—Ä–¥–∞–Ω–∏ “≥–∏—Å–æ–±–∏ –∫–æ—Ä–±–∞—Ä\n" +
                          "–°–∞–≤–æ–ª–∏ –Ω–∞–≤ - –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Å–∞–≤–æ–ª\n" +
                          "Top - –±–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ —Ç–æ–ø 50 –∫–æ—Ä–±–∞—Ä\n" +
                          "Profile - –±–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ —à–∞—Ö—Å–∏–∏ —à—É–º–æ\n" +
                          "Help - –±–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ –∏–Ω —Ä”Ø–π—Ö–∞—Ç\n";
        await _client.SendMessage(chatId, helpText, cancellationToken: cancellationToken);
    }

    private int GetLevel(int score)
    {
        if (score <= 150) return 1;
        else if (score <= 300) return 2;
        else if (score <= 450) return 3;
        else if (score <= 600) return 4;
        else return 5;
    }

    // Broadcast Message
    private async Task HandleBroadcastMessageAsync(long chatId, string messageText, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(messageText))
        {
            await _client.SendMessage(chatId,
                "‚ùå –ü–∞—ë–º –Ω–∞–±–æ—è–¥ —Ö–æ–ªƒ´ –±–æ—à–∞–¥! –õ—É—Ç—Ñ–∞–Ω –ø–∞—ë–º–∏ –¥–∏–≥–∞—Ä –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.",
                cancellationToken: cancellationToken);
            return;
        }

        _pendingBroadcast.Remove(chatId);

        try
        {
            using var scope = _scopeFactory.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
            var users = await dbContext.Users.Select(u => u.ChatId).ToListAsync(cancellationToken);

            int sentCount = 0;
            foreach (var userChatId in users)
            {
                try
                {
                    await _client.SendMessage(userChatId,
                        $"üì¢ –ü–∞—ë–º–∏ –º—É“≥–∏–º:\n{messageText}",
                        cancellationToken: cancellationToken);
                    sentCount++;
                    await Task.Delay(50, cancellationToken);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error sending message to user {userChatId}: {ex.Message}");
                }
            }

            await _client.SendMessage(chatId,
                $"‚úÖ –ü–∞—ë–º –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –±–∞ {sentCount} –∫–æ—Ä–±–∞—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥!",
                replyMarkup: await GetAdminButtonsAsync(cancellationToken),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error broadcasting message: {ex.Message}");
            await _client.SendMessage(chatId,
                "‚ùå –•–∞—Ç–æ–≥ƒ´ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º –±–∞ –∫–æ—Ä–±–∞—Ä–æ–Ω. –õ—É—Ç—Ñ–∞–Ω –±–æ–∑ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.",
                replyMarkup: await GetAdminButtonsAsync(cancellationToken),
                cancellationToken: cancellationToken);
        }
    }

    // Statistics
    private async Task HandleStatisticsCommandAsync(long chatId, IServiceProvider serviceProvider, CancellationToken cancellationToken)
    {
        try
        {
            using var scope = _scopeFactory.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();

            var activeUsersCount = await dbContext.Users.CountAsync(cancellationToken);
            var questionCounts = await dbContext.Questions
                .GroupBy(q => q.SubjectId)
                .Select(g => new { SubjectId = g.Key, Count = g.Count() })
                .ToDictionaryAsync(g => g.SubjectId, g => g.Count, cancellationToken);

            var subjects = await dbContext.Subjects.ToListAsync(cancellationToken);
            var subjectStats = subjects.Select(s =>
                $"{s.Name}: {(questionCounts.TryGetValue(s.Id, out int count) ? count : 0)} —Å–∞–≤–æ–ª").ToList();

            var statsMessage = "<b>üìä –û–º–æ—Ä</b>\n\n" +
                              $"üë• <b>–ö–æ—Ä–±–∞—Ä–æ–Ω–∏ —Ñ–∞—ä–æ–ª</b>: {activeUsersCount} –Ω–∞—Ñ–∞—Ä\n" +
                              $"\nüìö <b>–ú–∏“õ–¥–æ—Ä–∏ —Å–∞–≤–æ–ª“≥–æ –∞–∑ —Ä”Ø–∏ —Ñ–∞–Ω“≥–æ</b>:\n" +
                              string.Join("\n", subjectStats);

            await _client.SendMessage(chatId, statsMessage,
                parseMode: ParseMode.Html,
                replyMarkup: await GetAdminButtonsAsync(cancellationToken),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving statistics: {ex.Message}");
            await _client.SendMessage(chatId,
                "‚ùå –•–∞—Ç–æ–≥ƒ´ “≥–∞–Ω–≥–æ–º–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –æ–º–æ—Ä. –õ—É—Ç—Ñ–∞–Ω –±–æ–∑ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.",
                replyMarkup: await GetAdminButtonsAsync(cancellationToken),
                cancellationToken: cancellationToken);
        }
    }

    // File Upload
    private async Task HandleFileUploadAsync(Message message, IQuestionService questionService, ISubjectService subjectService, CancellationToken cancellationToken)
    {
        if (message.Document == null)
            return;

        var chatId = message.Chat.Id;
        var fileName = message.Document.FileName ?? "unnamed.docx";
        var username = !string.IsNullOrWhiteSpace(message.From?.Username)
            ? $"@{message.From.Username}"
            : message.From?.FirstName ?? "Unknown user";

        if (!fileName.EndsWith(".docx", StringComparison.OrdinalIgnoreCase))
        {
            await _client.SendMessage(chatId,
                "‚ùå –õ—É—Ç—Ñ–∞–Ω —Ç–∞–Ω“≥–æ —Ñ–∞–π–ª–∏ .docx —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥!",
                cancellationToken: cancellationToken);
            return;
        }

        try
        {
            var file = await _client.GetFileAsync(message.Document.FileId, cancellationToken);
            if (file.FilePath == null)
            {
                throw new Exception("Could not get file path from Telegram");
            }

            using var stream = new MemoryStream();
            await _client.DownloadFile(file.FilePath, stream, cancellationToken);
            stream.Position = 0;

            if (!_userCurrentSubject.TryGetValue(chatId, out int currentSubject))
            {
                await _client.SendMessage(chatId,
                    "‚ùå –õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª —Ñ–∞–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥!",
                    cancellationToken: cancellationToken);
                return;
            }

            await NotifyAdminsAsync($"üì• –§–∞–π–ª–∏ –Ω–∞–≤ –∞–∑ {username}\n–ù–æ–º–∏ —Ñ–∞–π–ª: {fileName}\n–ë–∞ –∫–æ—Ä–∫–∞—Ä–¥ –¥–æ–¥–∞ —à—É–¥...", cancellationToken);

            var questions = ParseQuestionsDocx.ParseQuestionsFromDocx(stream, currentSubject);

            foreach (var question in questions)
            {
                await questionService.CreateQuestion(question);
            }

            var successMessage = $"‚úÖ {questions.Count} —Å–∞–≤–æ–ª –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥!";
            await _client.SendMessage(chatId, successMessage, cancellationToken: cancellationToken);

            await NotifyAdminsAsync($"‚úÖ –ê–∑ —Ñ–∞–π–ª–∏ {fileName}\n" +
                                   $"–ö–∏ –∞–∑ —Ç–∞—Ä–∞—Ñ–∏ {username} —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥–∞ –±—É–¥,\n" +
                                   $"{questions.Count} —Å–∞–≤–æ–ª –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥!", cancellationToken);
        }
        catch (Exception ex)
        {
            var errorMessage = $"‚ùå –•–∞—Ç–æ–≥ƒ´: {ex.Message}";
            await _client.SendMessage(chatId, errorMessage, cancellationToken: cancellationToken);

            await NotifyAdminsAsync($"‚ùå –•–∞—Ç–æ–≥ƒ´ “≥–∞–Ω–≥–æ–º–∏ –∫–æ—Ä–∫–∞—Ä–¥–∏ —Ñ–∞–π–ª:\n" +
                                   $"–§–∞–π–ª: {fileName}\n" +
                                   $"–ö–æ—Ä–±–∞—Ä: {username}\n" +
                                   $"–•–∞—Ç–æ–≥ƒ´: {ex.Message}", cancellationToken);
        }
    }

    private async Task NotifyAdminsAsync(string message, CancellationToken cancellationToken)
    {
        try
        {
            var chatMembers = await _client.GetChatAdministratorsAsync(_channelId, cancellationToken);

            foreach (var member in chatMembers)
            {
                if (member.Status is ChatMemberStatus.Creator or ChatMemberStatus.Administrator)
                {
                    try
                    {
                        await _client.SendMessage(member.User.Id, message, cancellationToken: cancellationToken);
                    }
                    catch (Exception)
                    {
                        continue;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error notifying admins: {ex.Message}");
        }
    }

 
    // Admin Panel
    private async Task<bool> IsUserAdminAsync(long chatId, CancellationToken cancellationToken)
    {
        try
        {
            var chatMember = await _client.GetChatMemberAsync(_channelId, chatId, cancellationToken);
            var isAdmin = chatMember.Status is ChatMemberStatus.Creator or ChatMemberStatus.Administrator;
            Console.WriteLine($"Checking admin status for ChatId {chatId}: Status={chatMember.Status}, IsAdmin={isAdmin}");
            return isAdmin;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking admin status: {ex.Message}");
            return false;
        }
    }

    private async Task<IReplyMarkup> GetAdminButtonsAsync(CancellationToken cancellationToken)
    {
        var adminKeyboard = new ReplyKeyboardMarkup
        {
            Keyboard = new List<List<KeyboardButton>>
            {
                new() { new KeyboardButton("üìö –ò–Ω—Ç–∏—Ö–æ–±–∏ —Ñ–∞–Ω") },
                new() { new KeyboardButton("üìä –û–º–æ—Ä"), new KeyboardButton("üìù –°–∞–≤–æ–ª“≥–æ") },
                new() { new KeyboardButton("üì¢ –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º") },
                new() { new KeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç") }
            },
            ResizeKeyboard = true
        };
        return adminKeyboard;
    }

    private async Task HandleAdminCommandAsync(long chatId, CancellationToken cancellationToken)
    {
        var isAdmin = await IsUserAdminAsync(chatId, cancellationToken);
        Console.WriteLine($"Admin command requested by ChatId {chatId}: IsAdmin={isAdmin}");

        if (!isAdmin)
        {
            await _client.SendMessage(chatId,
                "‚ùå –ë—É–±–∞—Ö—à–µ–¥, —à—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥! \n–ë–∞—Ä–æ–∏ –∞–¥–º–∏–Ω —à—É–¥–∞–Ω –ª—É—Ç—Ñ–∞–Ω –±–∞ –∫–∞–Ω–∞–ª “≥–∞–º—á—É–Ω –º–∞—ä–º—É—Ä (–∞–¥–º–∏–Ω) —ë —Å–æ–∑–∞–Ω–¥–∞ (–∫—Ä–∏–µ–π—Ç–æ—Ä) –∏–ª–æ–≤–∞ —à–∞–≤–µ–¥.",
                cancellationToken: cancellationToken);
            return;
        }

        await _client.SendMessage(chatId,
            "–•—É—à –æ–º–∞–¥–µ–¥ –±–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω!\n" +
            "–õ—É—Ç—Ñ–∞–Ω –∞–º–∞–ª—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
            replyMarkup: await GetAdminButtonsAsync(cancellationToken),
            cancellationToken: cancellationToken);
    }
}